"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[1055],{16808:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>j,contentTitle:()=>u,default:()=>p,frontMatter:()=>d,metadata:()=>t,toc:()=>x});const t=JSON.parse('{"id":"query/object-fetcher/association","title":"Associations","description":"In last doc we introduced scalar property fetching. In this doc we discuss association fetching.","source":"@site/docs/query/object-fetcher/association.mdx","sourceDirName":"query/object-fetcher","slug":"/query/object-fetcher/association","permalink":"/jimmer-doc/docs/query/object-fetcher/association","draft":false,"unlisted":false,"editUrl":"https://github.com/babyfish-ct/jimmer-doc/edit/main/docs/query/object-fetcher/association.mdx","tags":[],"version":"current","lastUpdatedAt":1742053318000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Associations"},"sidebar":"tutorialSidebar","previous":{"title":"Ordinary Properties","permalink":"/jimmer-doc/docs/query/object-fetcher/props"},"next":{"title":"Recursive Query","permalink":"/jimmer-doc/docs/query/object-fetcher/recursive"}}');var i=s(74848),l=s(28453),a=s(11470),o=s(19365),r=s(74400);function c(e){const n={a:"a",code:"code",li:"li",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Readers can first ignore the concept of ",(0,i.jsx)(n.code,{children:"filters"}),", it is just to keep this article highly rigorous, not the content to be discussed here."]}),"\n",(0,i.jsx)(n.p,{children:"If you want to understand, it contains two parts:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#property-level-filters",children:"The last section of this article: Property Filters"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"../global-filter",children:"Global Filters"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}const d={sidebar_position:3,title:"Associations"},u=void 0,j={},x=[{value:"Fetch associated objects with only id",id:"fetch-associated-objects-with-only-id",level:2},{value:"ManyToOne: Book.store",id:"manytoone-bookstore",level:3},{value:"ManyToMany: Book.authors",id:"manytomany-bookauthors",level:3},{value:"Fetch complex associated objects",id:"fetch-complex-associated-objects",level:2},{value:"ManyToOne: Book.store",id:"manytoone-bookstore-1",level:3},{value:"ManyToMany: Book.authors",id:"manytomany-bookauthors-1",level:3},{value:"Fetching all table fields",id:"fetching-all-table-fields",level:2},{value:"Special Configurations for Associations",id:"special-configurations-for-associations",level:2},{value:"BatchSize",id:"batchsize",level:3},{value:"Pagination at Association Level",id:"pagination-at-association-level",level:3},{value:"Property-level Filters",id:"property-level-filters",level:3},{value:"Reference Fetch Type",id:"reference-fetch-type",level:3}];function b(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.a,{href:"./props",children:"last doc"})," we introduced scalar property fetching. In this doc we discuss association fetching."]}),"\n",(0,i.jsx)(n.p,{children:"ORM has two types of association properties:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Reference association: Associated with a single object ",(0,i.jsx)(n.em,{children:"(or null)"}),", the property return type is an entity object,\nused to express one-to-one and many-to-one associations."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["This article uses the many-to-one association property ",(0,i.jsx)(n.code,{children:"Book.store"})," as an example."]})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Collection association: Associated with multiple objects, the property return type is a list of entities,\nused to express one-to-many and many-to-many associations."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["This article uses the many-to-many association property ",(0,i.jsx)(n.code,{children:"Book.authors"})," as an example."]})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"fetch-associated-objects-with-only-id",children:"Fetch associated objects with only id"}),"\n",(0,i.jsxs)(n.p,{children:["When fetching associated objects without any parameters, only the ",(0,i.jsx)(n.code,{children:"id"})," property of the associated objects is returned."]}),"\n",(0,i.jsx)(n.h3,{id:"manytoone-bookstore",children:"ManyToOne: Book.store"}),"\n",(0,i.jsxs)(a.A,{groupId:"language",children:[(0,i.jsx)(o.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"BookTable book = Tables.BOOK_TABLE;\nList<Book> list = sqlClient.createQuery(book)\n    .where(book.edition().eq(3))\n    .select(\n        book.fetch(\n            Fetchers.BOOK_FETCHER\n                .allScalarFields()\n                // highlight-next-line\n                .store()\n        )\n    )\n    .execute();\nSystem.out.println(toJson(list));\n"})})}),(0,i.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val books = sqlClient\n.createQuery(Book::class) {\n    where(table.edition.eq(3))\n    select(\n        table.fetchBy {\n            allScalarFields()\n            // highlight-next-line\n            store()\n        }\n    )\n}\n.execute()\n"})})})]}),"\n",(0,i.jsxs)(n.p,{children:["Here, ",(0,i.jsx)(n.code,{children:"store()"})," indicates fetching the associated object. We did not specify any parameters for ",(0,i.jsx)(n.code,{children:"store()"}),", which means only the id property of the associated object is fetched."]}),"\n",(0,i.jsx)(n.p,{children:"The generated SQL is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select\n    tb_1_.ID,\n    tb_1_.NAME,\n    tb_1_.EDITION,\n    tb_1_.PRICE,\n    tb_1_.STORE_ID\nfrom BOOK tb_1_\nwhere tb_1_.EDITION = ?\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Since the many-to-one association ",(0,i.jsx)(n.code,{children:"Book.store"})," is based on a real foreign key, the foreign key ",(0,i.jsx)(n.code,{children:"STORE_ID"})," of the current table ",(0,i.jsx)(n.code,{children:"BOOK"})," is the id of the parent object."]}),"\n",(0,i.jsxs)(n.p,{children:["Because ",(0,i.jsx)(n.code,{children:"store()"})," only fetches the id property of the associated object, no additional SQL query is required. The parent object with only the id property can be directly constructed from the foreign key in the current data."]}),"\n",(0,i.jsx)(n.p,{children:"The returned value is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "id": 3,\n        "name": "Learning GraphQL",\n        "edition": 3,\n        "price": 51.00,\n        // highlight-next-line\n        "store": {\n            "id": 1\n        }\n    },\n    ...other objects omitted...\n]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"manytomany-bookauthors",children:"ManyToMany: Book.authors"}),"\n",(0,i.jsxs)(a.A,{groupId:"language",children:[(0,i.jsx)(o.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"BookTable book = Tables.BOOK_TABLE;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .select(\n        book.fetch(\n            Fetchers.BOOK_FETCHER.\n                .allScalarFields()\n                // highlight-next-line\n                .authors()\n        )\n    )\n    .execute();\n"})})}),(0,i.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val books = sqlClient\n    .createQuery(Book::class) {\n        where(table.edition.eq(3))\n        select(\n            table.fetchBy {\n                allScalarFields()\n                // highlight-next-line\n                authors()\n            }\n        )\n    }\n    .execute()\n"})})})]}),"\n",(0,i.jsxs)(n.p,{children:["Here, ",(0,i.jsx)(n.code,{children:"authors()"})," indicates fetching the associated objects. We did not specify any parameters for ",(0,i.jsx)(n.code,{children:"authors()"}),", which means only the id property of the associated objects is fetched."]}),"\n",(0,i.jsx)(n.p,{children:"Two SQLs are generated:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Query for the ",(0,i.jsx)(n.code,{children:"Book"})," objects themselves"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select \n    tb_1_.ID, \n    tb_1_.NAME, \n    tb_1_.EDITION, \n    tb_1_.PRICE\nfrom BOOK as tb_1_ \nwhere tb_1_.EDITION = ?\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Based on the ",(0,i.jsx)(n.code,{children:"Book.authors"})," association, query for the ",(0,i.jsx)(n.code,{children:"Author"})," associated objects with only id for all root objects queried in the previous step"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select \n    tb_1_.BOOK_ID, /* batch-map key */\n    tb_1_.AUTHOR_ID /* batch-map value */\nfrom BOOK_AUTHOR_MAPPING as tb_1_ \n    where tb_1_.BOOK_ID in (?, ?, ?, ?)\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This example demonstrates:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The query only needs the id of the associated objects, and no filters are used (filters will be explained later)."}),"\n",(0,i.jsxs)(n.p,{children:["Jimmer optimizes this case by only querying the ",(0,i.jsx)(n.code,{children:"BOOK_AUTHOR_MAPPING"})," table instead of the ",(0,i.jsx)(n.code,{children:"AUTHOR"})," table, because the middle table already contains the id of the associated objects."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"where tb_1_.BOOK_ID in (?, ?, ?, ?)"})," is a batch query, because the first query returns 4 root objects."]}),"\n",(0,i.jsx)(n.p,{children:"Jimmer uses batch queries to solve the N+1 problem, similar to DataLoader in GraphQL."}),"\n",(0,i.jsxs)(n.p,{children:["When a batch becomes too large, jimmer-sql will split it into smaller batches. This will be explained in the ",(0,i.jsx)(n.a,{href:"#batchsize",children:"BatchSize"})," section."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Jimmer queries the associated objects via separate SQL instead of using LEFT JOIN in the main query SQL to fetch associated objects."}),"\n",(0,i.jsx)(n.p,{children:"This is designed to avoid duplicate results when joining collection associations, which can be devastating for paged queries on aggregate roots."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The printed result is (formatted for readability, original output is compact):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "id":3,\n        "name":"Learning GraphQL",\n        "edition":3,\n        "price":51.00,\n        // highlight-next-line\n        "authors":[\n            {"id":1},\n            {"id":2}\n        ]\n    },\n    ...other objects omitted...\n]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"fetch-complex-associated-objects",children:"Fetch complex associated objects"}),"\n",(0,i.jsx)(n.p,{children:"When fetching associated objects, parameters can be specified to get associated objects with more information."}),"\n",(0,i.jsx)(n.h3,{id:"manytoone-bookstore-1",children:"ManyToOne: Book.store"}),"\n",(0,i.jsxs)(a.A,{groupId:"language",children:[(0,i.jsx)(o.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"BookTable book = Tables.BOOK_TABLE;\nList<Book> list = sqlClient.createQuery(book)\n    .where(book.edition().eq(3))\n    .select(\n        book.fetch(\n            Fetchers.BOOK_FETCHER\n                .allScalarFields()\n                // highlight-next-line\n                .store(\n                    Fetchers.BOOK_STORE_FETCHER\n                        // highlight-next-line\n                        .allScalarFields()\n                )\n        )\n    )\n    .execute();\nSystem.out.println(toJson(list));\n"})})}),(0,i.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val books = sqlClient\n.createQuery(Book::class) {\n    where(table.edition.eq(3))\n    select(\n        table.fetchBy {\n            allScalarFields()\n            // highlight-next-line\n            store {\n                // highlight-next-line\n                allScalarFields()\n            }\n        }\n    )\n}\n.execute()\n"})})})]}),"\n",(0,i.jsxs)(n.p,{children:["Here, ",(0,i.jsx)(n.code,{children:"store(...)"})," indicates fetching the associated object. We specify parameters for ",(0,i.jsx)(n.code,{children:"store(...)"})," to fetch information other than id of the associated object."]}),"\n",(0,i.jsx)(n.p,{children:"Two SQLs are generated:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Query for ",(0,i.jsx)(n.code,{children:"Book"})," objects"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select\n    tb_1_.ID,\n    tb_1_.NAME,\n    tb_1_.EDITION,\n    tb_1_.PRICE,\n    tb_1_.STORE_ID\nfrom BOOK tb_1_\nwhere tb_1_.EDITION = ?\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Based on the ",(0,i.jsx)(n.code,{children:"Book.store"})," association, query for relatively complete ",(0,i.jsx)(n.code,{children:"BookStore"})," associated objects for all root objects queried in the previous step"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select\n    tb_1_.ID,\n    tb_1_.NAME,\n    tb_1_.WEBSITE\nfrom BOOK_STORE tb_1_\nwhere tb_1_.ID in (?, ?)\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"where tb_1_.ID in (?, ?)"})," is a batch query. The first query returns 4 root objects, but the foreign key values are deduplicated to only 2 values."]}),"\n",(0,i.jsx)(n.p,{children:"The returned value is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "id": 3,\n        "name": "Learning GraphQL",\n        "edition": 3,\n        "price": 51.00,\n        // highlight-next-line\n        "store": {\n            "id": 1,\n            "name": "O\'REILLY",\n            "website": null\n        }\n    },\n    ...other objects omitted...  \n]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"manytomany-bookauthors-1",children:"ManyToMany: Book.authors"}),"\n",(0,i.jsxs)(a.A,{groupId:"language",children:[(0,i.jsx)(o.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"BookTable book = Tables.BOOK_TABLE;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .select(\n        book.fetch(\n            Fetchers.BOOK_FETCHER.\n                .allScalarFields()\n                // highlight-next-line\n                .authors(\n                    Fetchers.AUTHOR_FETCHER\n                        // highlight-next-line\n                        .allScalarFields()\n                )\n        )\n    )\n    .execute();\n"})})}),(0,i.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val books = sqlClient\n    .createQuery(Book::class) {\n        where(table.edition.eq(3))\n        select(\n            table.fetchBy {\n                allScalarFields()\n                // highlight-next-line\n                authors {\n                    // highlight-next-line\n                    allScalarFields()\n                }\n            }\n        )\n    }\n    .execute()\n"})})})]}),"\n",(0,i.jsxs)(n.p,{children:["Here, ",(0,i.jsx)(n.code,{children:"authors(...)"})," indicates fetching the associated objects. We specify parameters for ",(0,i.jsx)(n.code,{children:"authors(...)"})," to fetch information other than id of the associated objects."]}),"\n",(0,i.jsx)(n.p,{children:"Two SQLs are generated:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Query for the ",(0,i.jsx)(n.code,{children:"Book"})," objects themselves"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select \n    tb_1_.ID, \n    tb_1_.NAME, \n    tb_1_.EDITION, \n    tb_1_.PRICE\nfrom BOOK as tb_1_  \nwhere tb_1_.EDITION = ?\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Based on the ",(0,i.jsx)(n.code,{children:"Book.authors"})," association, query for relatively complete ",(0,i.jsx)(n.code,{children:"Author"})," associated objects for all root objects queried in previous step"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select\n    /* batch-map key */\n    tb_2_.BOOK_ID,\n\n    /* batch-map value */\n    tb_1_.ID,\n    tb_1_.FIRST_NAME,\n    tb_1_.LAST_NAME,\n    tb_1_.GENDER\n\nfrom AUTHOR tb_1_\ninner join BOOK_AUTHOR_MAPPING tb_2_\n    on tb_1_.ID = tb_2_.AUTHOR_ID\nwhere tb_2_.BOOK_ID in (?, ?, ?, ?)\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This example shows:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Information other than id is required for the associated objects, so both the ",(0,i.jsx)(n.code,{children:"BOOK_AUTHOR_MAPPING"})," table and the ",(0,i.jsx)(n.code,{children:"AUTHOR"})," table are queried, besides just the middle table."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"where tb_2_.BOOK_ID in (?, ?, ?, ?)"})," is a batch query, because the first query returns 4 root objects."]}),"\n",(0,i.jsx)(n.p,{children:"Jimmer uses batch queries to solve the N+1 problem, similar to DataLoader in GraphQL."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Jimmer queries the associated objects via separate SQL instead of using LEFT JOIN in the main query SQL."}),"\n",(0,i.jsx)(n.p,{children:"This is designed to avoid duplicate results when joining collection associations, which can be devastating for paged queries on aggregate roots."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The printed result is (formatted for readability):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "id":3,\n        "name":"Learning GraphQL",\n        "edition":3,\n        "price":51.00,\n        // highlight-next-line\n        "authors":[\n            {\n                "id": 1,\n                "firstName": "Eve",\n                "lastName": "Procello",\n                "gender": "FEMALE"\n            },\n            {\n                "id": 2,\n                "firstName": "Alex",\n                "lastName": "Banks",\n                "gender": "MALE"\n            }\n        ]\n    },\n    ...other objects omitted...\n]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"fetching-all-table-fields",children:"Fetching all table fields"}),"\n",(0,i.jsxs)(n.p,{children:["In some cases, all fields defined in the table are needed. ",(0,i.jsx)(n.code,{children:"allTableFields"})," can be used for this."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"allTableFields"})," fetches all properties defined in the table, including all scalar properties (same as ",(0,i.jsx)(n.code,{children:"allScalarFields"}),"), one-to-one/many-to-one associations based on foreign keys. It does not include one-to-many, many-to-many associations, one-to-one/many-to-one associations based on middle tables, calculated properties or view properties."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"allTableFields"})," includes all one-to-one/many-to-one associations based on foreign keys, in addition to ",(0,i.jsx)(n.code,{children:"allScalarFields"}),". The fetched associated objects only have the ",(0,i.jsx)(n.code,{children:"id"})," property."]})}),"\n",(0,i.jsxs)(a.A,{groupId:"language",children:[(0,i.jsx)(o.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"BookTable book = Tables.BOOK_TABLE;\nList<Book> list = sqlClient.createQuery(book)\n    .where(book.edition().eq(3))\n    .select(\n        book.fetch(\n            Fetchers.BOOK_FETCHER\n                // highlight-next-line\n                .allTableFields()\n        )\n    )\n    .execute();\nSystem.out.println(toJson(list));\n"})})}),(0,i.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val bookAllTableFields = sqlClient\n    .createQuery(Book::class) {\n        where(table.edition.eq(3))\n        select(\n            table.fetchBy {\n                // highlight-next-line\n                allTableFields()\n            }\n        )\n    }\n    .execute()\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"The result is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "id": 3,\n        "name": "Learning GraphQL",\n        "edition": 3,\n        "price": 51.00,\n        // highlight-next-line\n        "store": {\n            "id": 1\n        }\n    }\n    ...other objects omitted\n]\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["In some cases, ",(0,i.jsx)(n.code,{children:"select(table.fetch(Fetchers.XXX_FETCHER.allTableFields()))"})," is equivalent to ",(0,i.jsx)(n.code,{children:"select(table)"}),". The latter can be considered as shorthand for the former."]}),(0,i.jsxs)(n.p,{children:["The equivalence holds when associated objects are not affected by ",(0,i.jsx)(r.l,{buttonText:"filters",children:(0,i.jsx)(h,{})}),"."]})]}),"\n",(0,i.jsx)(n.p,{children:"The simple equivalent shorthand is:"}),"\n",(0,i.jsxs)(a.A,{groupId:"language",children:[(0,i.jsx)(o.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"BookTable book = Tables.BOOK_TABLE;\nList<Book> list = sqlClient.createQuery(book)\n    .where(book.edition().eq(3))\n    // highlight-next-line\n    .select(book)  \n    .execute();\nSystem.out.println(toJson(list));\n"})})}),(0,i.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val bookAllScalarFields = sqlClient\n    .createQuery(Book::class) {\n        where(table.edition.eq(3))\n        // highlight-next-line\n        select(table)\n    }\n    .execute()\n\n"})})})]}),"\n",(0,i.jsx)(n.h2,{id:"special-configurations-for-associations",children:"Special Configurations for Associations"}),"\n",(0,i.jsx)(n.h3,{id:"batchsize",children:"BatchSize"}),"\n",(0,i.jsxs)(n.p,{children:["For one-to-many/many-to-many associations, a large number of associated objects may impact application performance. The ",(0,i.jsx)(n.code,{children:"batchSize"})," configuration is provided for management."]}),"\n",(0,i.jsxs)(n.p,{children:["The following example does not configure ",(0,i.jsx)(n.code,{children:"batchSize"}),":"]}),"\n",(0,i.jsxs)(a.A,{groupId:"language",children:[(0,i.jsx)(o.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"BookTable book = Tables.BOOK_TABLE;\nList<Book> list = sqlClient.createQuery(book)\n    .where(book.edition().eq(3))\n    .select(\n        book.fetch(\n                Fetchers.BOOK_FETCHER.allScalarFields()\n                // highlight-next-line\n                .authors(Fetchers.AUTHOR_FETCHER.allScalarFields())\n        )\n    )\n    .execute();\nSystem.out.println(toJson(list));\n"})})}),(0,i.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val books = sqlClient\n    .createQuery(Book::class) {\n        where(table.edition.eq(3))\n        select(\n            table.fetchBy {\n                allTableFields()\n                authors {\n                    // highlight-next-line\n                    allScalarFields()\n                }\n            }\n        )\n    }\n.execute()\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"The generated SQL is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"# 1. Query book table to get all BOOK_ID\nselect\n    tb_1_.ID,\n    tb_1_.NAME,\n    tb_1_.EDITION,\n    tb_1_.PRICE\nfrom BOOK tb_1_\nwhere tb_1_.EDITION = ?\n\n# 2. Use BOOK_ID from previous step to join query author table\nselect\n    tb_2_.BOOK_ID,\n    tb_1_.ID,\n    tb_1_.FIRST_NAME,\n    tb_1_.LAST_NAME,\n    tb_1_.GENDER\nfrom AUTHOR tb_1_\ninner join BOOK_AUTHOR_MAPPING tb_2_ on tb_1_.ID = tb_2_.AUTHOR_ID\nwhere tb_2_.BOOK_ID in (?, ?, ?, ?)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, no ",(0,i.jsx)(n.code,{children:"batchSize"})," is configured so the default will be used. All BOOK_ID will be directly used in the ",(0,i.jsx)(n.code,{children:"in(...)"})," list of the second query."]}),"\n",(0,i.jsx)(n.p,{children:"The output is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "id": 3,\n        "name": "Learning GraphQL",\n        "edition": 3,\n        "price": 51.00,\n        "authors": [\n            {\n                "id": 1,\n                "firstName": "Eve",\n                "lastName": "Procello",\n                "gender": "FEMALE"\n            },\n            {\n                "id": 2,\n                "firstName": "Alex",\n                "lastName": "Banks",\n                "gender": "MALE"\n            }\n        ]\n    },\n    ...omit other objects\n]\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"In the example above, we see the query:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select\n    tb_2_.BOOK_ID,\n    tb_1_.ID,\n    tb_1_.FIRST_NAME,\n    tb_1_.LAST_NAME,\n    tb_1_.GENDER\nfrom AUTHOR tb_1_\ninner join BOOK_AUTHOR_MAPPING tb_2_ on tb_1_.ID = tb_2_.AUTHOR_ID  \nwhere tb_2_.BOOK_ID in (?, ?, ?, ?)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here, the ",(0,i.jsx)(n.code,{children:"in"})," expression implements batch query to solve ",(0,i.jsx)(n.code,{children:"N+1"})," problem."]}),"\n",(0,i.jsxs)(n.p,{children:["If a batch is too large, it will be split into multiple batches based on ",(0,i.jsx)(n.code,{children:"batchSize"})," configuration, such as:"]}),"\n",(0,i.jsxs)(a.A,{groupId:"language",children:[(0,i.jsx)(o.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"BookTable book = Tables.BOOK_TABLE;\nList<Book> list = sqlClient.createQuery(book)\n    .where(book.edition().eq(3))\n    .select(\n        book.fetch(\n                Fetchers.BOOK_FETCHER.allScalarFields()\n                // highlight-next-line\n                .authors(Fetchers.AUTHOR_FETCHER.allScalarFields(), it -> it.batch(2))\n        )\n    )\n    .execute();\n"})})}),(0,i.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val books = sqlClient\n    .createQuery(Book::class) {\n        where(table.edition.eq(3))\n        select(\n            table.fetchBy {\n                allScalarFields()\n                authors({\n                    // highlight-next-line\n                    batch(2)\n                }) {}\n            }\n        )\n    }\n    .execute()\n"})})})]}),"\n",(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsxs)(n.p,{children:["Here the ",(0,i.jsx)(n.code,{children:"batchSize"})," for ",(0,i.jsx)(n.code,{children:"authors"})," is set to 2. Such a small value would cause poor performance, it is only for demo purposes. Please do not use such small values in real projects."]})}),"\n",(0,i.jsxs)(n.p,{children:["This would cause the ",(0,i.jsx)(n.code,{children:"in(?, ?, ?, ?)"})," to be split into two ",(0,i.jsx)(n.code,{children:"in(?, ?)"}),", and the SQL to fetch associated objects would be split into two."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select\n    tb_2_.BOOK_ID,\n    tb_1_.ID,\n    tb_1_.FIRST_NAME,\n    tb_1_.LAST_NAME, \n    tb_1_.GENDER\nfrom AUTHOR tb_1_\ninner join BOOK_AUTHOR_MAPPING tb_2_ on tb_1_.ID = tb_2_.AUTHOR_ID\nwhere tb_2_.BOOK_ID in (?, ?) \n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select\n    tb_2_.BOOK_ID,\n    tb_1_.ID,\n    tb_1_.FIRST_NAME,\n    tb_1_.LAST_NAME,\n    tb_1_.GENDER\nfrom AUTHOR tb_1_\ninner join BOOK_AUTHOR_MAPPING tb_2_ on tb_1_.ID = tb_2_.AUTHOR_ID\nwhere tb_2_.BOOK_ID in (?, ?)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In real projects, in most cases ",(0,i.jsx)(n.code,{children:"batchSize"})," would not be configured like this at fetcher level. Instead, use the global configurations in ",(0,i.jsx)(n.code,{children:"SqlClient"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"JSqlClient.getDefaultBatchSize()"}),": Default ",(0,i.jsx)(n.code,{children:"batchSize"})," for one-to-one and many-to-one associations, default 128"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"JSqlClient.getDefaultListBatchSize()"}),": Default ",(0,i.jsx)(n.code,{children:"batchSize"})," for one-to-many and many-to-many associations, default 16"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["When creating ",(0,i.jsx)(n.code,{children:"SqlClient"}),", the global configs can be changed:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Using spring boot"}),"\n",(0,i.jsxs)(n.p,{children:["Add configuration into ",(0,i.jsx)(n.code,{children:"application.yml"})," or ",(0,i.jsx)(n.code,{children:"application.properties"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:'language-title="application.yml"',children:"jimmer:\n    default-batch-size: 256\n    default-list-batch-size: 32\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Using low-level API"}),"\n",(0,i.jsxs)(a.A,{groupId:"language",children:[(0,i.jsx)(o.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"JSqlClient sqlClient = JSqlClient\n    .newBuilder()\n    .setDefaultBatchSize(256) \n    .setDefaultListBatchSize(32)\n    ....\n    build();\n"})})}),(0,i.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val sqlClient = newKSqlClient {\n    setDefaultBatchSize(256)\n    setDefaultListBatchSize(32)\n    ....\n    }\n"})})})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["No matter association-level ",(0,i.jsx)(n.code,{children:"batchSize"})," or global ",(0,i.jsx)(n.code,{children:"batchSize"}),", do not set above 1000 because Oracle database allows max 1000 values in ",(0,i.jsx)(n.code,{children:"in(...)"}),"."]})}),"\n",(0,i.jsx)(n.h3,{id:"pagination-at-association-level",children:"Pagination at Association Level"}),"\n",(0,i.jsxs)(n.p,{children:["For collection associations, ",(0,i.jsx)(n.code,{children:"limit(limit, offset)"})," can be specified during fetching to do pagination at association level."]}),"\n",(0,i.jsxs)(n.admonition,{type:"caution",children:[(0,i.jsxs)(n.p,{children:["Association-level pagination and batch loading cannot coexist. Association-level pagination necessarily causes ",(0,i.jsx)(n.code,{children:"N+1"})," problem. Please use this feature cautiously!"]}),(0,i.jsxs)(n.p,{children:["If association-level pagination is used, ",(0,i.jsx)(n.code,{children:"batchSize"})," must be set to 1, otherwise exceptions would be thrown. This is designed to make it clear to developers and readers that the code has ",(0,i.jsx)(n.code,{children:"N+1"})," performance risk."]})]}),"\n",(0,i.jsxs)(a.A,{groupId:"language",children:[(0,i.jsx)(o.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"BookTable book = Tables.BOOK_TABLE;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .select(\n        book.fetch(\n            Fetchers.BOOK_FETCHER\n            .allScalarFields()\n            .authors(\n                Fetchers.AUTHOR_FETCHER.allScalarFields(),\n                // highlight-next-line\n                it -> it.batch(1).limit(/*limit*/ 10, /*offset*/ 90)\n            )\n        )\n    )\n    .execute();\n"})})}),(0,i.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val books = sqlClient\n    .createQuery(Book::class) {\n        where(table.edition.eq(3))\n        select(\n            // highlight-next-line\n            table.fetchBy {\n                allScalarFields()\n                authors({\n                    batch(1)\n                    // highlight-next-line\n                    limit(limit = 90, offset = 10)\n                    }) {\n                    allScalarFields()\n                }\n            }\n        )\n    }\n    .execute()\n"})})})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Since association pagination cannot solve ",(0,i.jsx)(n.code,{children:"N+1"})," problem, multiple SQLs are generated"]}),"\n",(0,i.jsxs)(n.li,{children:["For simplicity let's assume ",(0,i.jsx)(n.code,{children:"H2Dialect"})," is used so different databases have the same paging SQL"]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Query current ",(0,i.jsx)(n.code,{children:"Book"})," objects"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select\n    tb_1_.ID,\n    tb_1_.NAME,\n    tb_1_.EDITION,\n    tb_1_.PRICE\nfrom BOOK as tb_1_\nwhere tb_1_.EDITION = ?\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Paginated query on ",(0,i.jsx)(n.code,{children:"authors"})," collection of the 1st ",(0,i.jsx)(n.code,{children:"Book"})," object"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select\n    tb_1_.AUTHOR_ID,\n    tb_3_.FIRST_NAME,\n    tb_3_.LAST_NAME, \n    tb_3_.GENDER\nfrom BOOK_AUTHOR_MAPPING as tb_1_  \ninner join AUTHOR as tb_3_ on tb_1_.AUTHOR_ID = tb_3_.ID\nwhere tb_1_.BOOK_ID = ?\n/* highlight-next-line */\nlimit ? offset ?  \n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Paginated query on ",(0,i.jsx)(n.code,{children:"authors"})," collection of the 2nd ",(0,i.jsx)(n.code,{children:"Book"})," object"]}),"\n",(0,i.jsx)(n.p,{children:"Same as above, omitted."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Paginated query on ",(0,i.jsx)(n.code,{children:"authors"})," collection of the 3rd ",(0,i.jsx)(n.code,{children:"Book"})," object"]}),"\n",(0,i.jsx)(n.p,{children:"Same as above, omitted."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Paginated query on ",(0,i.jsx)(n.code,{children:"authors"})," collection of the 4th ",(0,i.jsx)(n.code,{children:"Book"})," object"]}),"\n",(0,i.jsx)(n.p,{children:"Same as above, omitted."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"property-level-filters",children:"Property-level Filters"}),"\n",(0,i.jsx)(n.p,{children:"When fetching associations, filters can be specified to filter associated objects."}),"\n",(0,i.jsxs)(n.p,{children:["Here for comparison, the query selects two columns, both are ",(0,i.jsx)(n.code,{children:"Book"})," type."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"Book.authors"})," of the first column uses filter"]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"Book.authors"})," of the second column does not use filter"]}),"\n"]}),"\n",(0,i.jsxs)(a.A,{groupId:"language",children:[(0,i.jsx)(o.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'BookTable book = Tables.BOOK_TABLE;\n\nList<Tuple2<Book, Book>> books = sqlClient\n    .createQuery(book)\n    .select(\n        // First column  \n        book.fetch(\n            Fetchers.BOOK_FETCHER\n            .allScalarFields()\n            .authors(\n                Fetchers.AUTHOR_FETCHER.allScalarFields(),\n\n                // Use filter\n                // highlight-next-line\n                it -> it.filter(args -> {\n                    args.where(args.getTable().firstName().ilike("a"));\n                })\n            )\n        ),\n\n        // Second column\n        book.fetch(\n            Fetchers.BOOK_FETCHER\n                .allScalarFields()\n                .authors(\n                    Fetchers.AUTHOR_FETCHER.allScalarFields()\n                // No filter used\n                )\n        )\n    )\n    .execute();\n'})})}),(0,i.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val tuples: List<Tuple2<Book, Book>> = sqlClient\n    .createQuery(Book::class) {\n        where(table.edition.eq(3))\n        select(\n\n            // First column\n            table.fetchBy {\n                allScalarFields()\n                authors({\n                    // Use filter\n                    // highlight-next-line\n                    filter {\n                    where(table.firstName ilike "a")\n                    }\n                }) {\n                    allScalarFields()\n                }\n            },\n\n            // Second column\n            table.fetchBy {\n                allScalarFields()\n                authors { // No filter used  \n                    allScalarFields()\n                }\n            }\n        )\n    }\n.execute()\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"Three SQLs are generated:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Query the two ",(0,i.jsx)(n.code,{children:"Book"})," objects needed for the tuple"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select\n\n/* For tuple._1 */  \n    tb_1_.ID,\n    tb_1_.NAME,\n    tb_1_.EDITION,\n    tb_1_.PRICE,\n\n/* For tuple._2 */\n    tb_1_.ID,\n    tb_1_.NAME,\n    tb_1_.EDITION, \n    tb_1_.PRICE\n\nfrom BOOK as tb_1_ \nwhere tb_1_.EDITION = ?\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["For the ",(0,i.jsx)(n.code,{children:"authors"})," association of the 4 ",(0,i.jsx)(n.code,{children:"Book"})," objects in column 1, use filter"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select\n\n    tb_1_.BOOK_ID,\n    tb_1_.AUTHOR_ID,\n    tb_3_.FIRST_NAME,\n    tb_3_.LAST_NAME,\n    tb_3_.GENDER\nfrom BOOK_AUTHOR_MAPPING as tb_1_\ninner join AUTHOR as tb_3_ on tb_1_.AUTHOR_ID = tb_3_.ID \nwhere\n    tb_1_.BOOK_ID in (?, ?, ?, ?)  \nand\n    /* Use filter here */\n    /* highlight-next-line */\n    lower(tb_3_.FIRST_NAME) like ?\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["For the ",(0,i.jsx)(n.code,{children:"authors"})," association of the 4 ",(0,i.jsx)(n.code,{children:"Book"})," objects in column 2, no filter"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select\n\n    tb_1_.BOOK_ID,\n    tb_1_.AUTHOR_ID,\n    tb_3_.FIRST_NAME,\n    tb_3_.LAST_NAME,\n    tb_3_.GENDER\nfrom BOOK_AUTHOR_MAPPING as tb_1_\ninner join AUTHOR as tb_3_ on tb_1_.AUTHOR_ID = tb_3_.ID\nwhere\n    tb_1_.BOOK_ID in (?, ?, ?, ?)\n/* No filter here */ \n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The printed result is (formatted for readability):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'Tuple2{\n    _1={\n        "id":3,\n        "name":"Learning GraphQL",\n        "edition":3,\n        "price":51.00,\n\n        // Filter used, incomplete collection\n        // highlight-next-line\n        "authors":[\n            {\n                "id":2,\n                "firstName":"Alex",\n                "lastName":"Banks",\n                "gender":"MALE" \n            }\n        ]\n    },\n    _2={\n        "id":3,\n        "name":"Learning GraphQL",\n        "edition":3,\n        "price":51.00,\n\n        // No filter, complete collection \n        // highlight-next-line\n        "authors":[\n            {\n                "id":2,\n                "firstName":"Alex",\n                "lastName":"Banks",\n                "gender":"MALE"\n            },{\n                "id":"fd6bb6cf-336d-416c-8005-1ae11a6694b5",\n                "firstName":"Eve",\n                "lastName":"Procello",\n                "gender":"MALE"\n            }\n        ]\n    }\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Filters can not only filter associated objects, but also sort them. The principle is similar so not demonstrated here."})}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"For associations satisfying both below conditions, applying filters would cause exceptions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Many-to-one"}),"\n",(0,i.jsx)(n.li,{children:"Not null"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["After field filters are used, ",(0,i.jsx)(n.a,{href:"../../cache/cache-type/association",children:"association cache"})," for that field will be ignored."]}),"\n",(0,i.jsxs)(n.p,{children:["To use the association cache, global filters supporting ",(0,i.jsx)(n.a,{href:"../../cache/multiview-cache",children:"multi-view cache"})," can be used."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"A common mistake in real development (Java for example) is:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'filter(it -> args.getTable().firstName().ilike("a"))'})}),"\n",(0,i.jsxs)(n.p,{children:["This creates the condition expression but does not call ",(0,i.jsx)(n.code,{children:"args.where"}),". Filter code not calling either ",(0,i.jsx)(n.code,{children:"args.where"})," or ",(0,i.jsx)(n.code,{children:"args.orderBy"})," is meaningless."]}),"\n",(0,i.jsx)(n.p,{children:"The correct code is:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'filter(it -> args.where(args.getTable().firstName().ilike("a")))'})}),"\n"]}),"\n"]})}),"\n",(0,i.jsx)(n.h3,{id:"reference-fetch-type",children:"Reference Fetch Type"}),"\n",(0,i.jsx)(n.p,{children:"By default, Jimmer uses batch-optimized additional queries to fetch associated objects."}),"\n",(0,i.jsxs)(n.p,{children:["However, for reference association properties ",(0,i.jsxs)(n.em,{children:["(i.e., non-collection associations, ",(0,i.jsx)(n.code,{children:"@ManyToOne"})," or ",(0,i.jsx)(n.code,{children:"OneToOne"}),")"]}),", the fetching mode for associated objects can be configured. As shown below:"]}),"\n",(0,i.jsxs)(a.A,{groupId:"language",children:[(0,i.jsx)(o.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'BookTable table = Tables.BOOK_TABLE;\n\nList<Book> books = sqlClient\n    .createQuery(table)\n    .where(table.name().eq("GraphQL in Action"))\n    .select(\n        table.fetch(\n            Fetchers.BOOK_FETCHER\n                .allScalarFields()\n                .store(\n                    // highlight-next-line\n                    ReferenceFetchType.JOIN_ALWAYS,\n                    Fetchers.BOOK_STORE_FETCHER\n                            .allScalarFields()\n                )\n        )\n    )\n    .execute();\n'})})}),(0,i.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val books = sqlClient.createQuery(Book::class) {\n    where(table.name eq "GraphQL in Action")\n    select(\n        table.fetchBy { \n            allScalarFields()\n            store(\n                // highlight-next-line\n                ReferenceFetchType.JOIN_ALWAYS\n            ) {\n                allScalarFields()\n            }\n        }\n    )\n}\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"This generates the following SQL:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select\n    tb_1_.ID,\n    tb_1_.NAME,\n    tb_1_.EDITION,\n    tb_1_.PRICE,\n    tb_2_.ID,\n    tb_2_.NAME,\n    tb_2_.WEBSITE\nfrom BOOK tb_1_\n// highlight-start\nleft join BOOK_STORE tb_2_\n    on tb_1_.STORE_ID = tb_2_.ID\n// highlight-end\nwhere\n    tb_1_.NAME = ? /* GraphQL in Action */\n"})}),"\n",(0,i.jsx)(n.p,{children:"The resulting data is as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "id": 10,\n        "name": "GraphQL in Action",\n        "edition": 1,\n        "price": 80,\n        // highlight-next-line\n        "store": {\n            "id": 2,\n            "name": "MANNING",\n            "website": null\n        }\n    },\n    {\n        "id": 11,\n        "name": "GraphQL in Action",\n        "edition": 2,\n        "price": 81,\n        // highlight-next-line\n        "store": {\n            "id": 2,\n            "name": "MANNING",\n            "website": null\n        }\n    },\n    {\n        "id": 12,\n        "name": "GraphQL in Action",\n        "edition": 3,\n        "price": 80,\n        // highlight-next-line\n        "store": {\n            "id": 2,\n            "name": "MANNING",\n            "website": null\n        }\n    }\n]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the example above, we used ",(0,i.jsx)(n.code,{children:"ReferenceFetchType.JOIN_ALWAYS"}),", which is one of the supported options. The complete list of options is as follows:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"AUTO:"}),"\n",(0,i.jsx)(n.p,{children:"Default option, uses global configuration"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"SELECT:"}),"\n",(0,i.jsx)(n.p,{children:"Uses batch-optimized additional queries to fetch associated objects"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"JOIN_IF_NO_CACHE:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["If the association property to be fetched has enabled ",(0,i.jsx)(n.a,{href:"../../cache/cache-type/association",children:"association cache"}),", equivalent to ",(0,i.jsx)(n.code,{children:"SELECT"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Otherwise, equivalent to ",(0,i.jsx)(n.code,{children:"JOIN_ALWAYS"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"JOIN_ALWAYS:"}),"\n",(0,i.jsxs)(n.p,{children:["Uses SQL's ",(0,i.jsx)(n.code,{children:"left join"})," operation to query both the current object and associated objects in a single SQL query."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"This configuration makes the SQL query for the current object more complex, but doesn't result in generating more SQL queries."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If you fetch a reference association without explicitly specifying ",(0,i.jsx)(n.code,{children:"ReferenceFetchType"})," or set it to ",(0,i.jsx)(n.code,{children:"AUTO"}),", it will follow the global configuration. How do you specify the global configuration?"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Using jimmer-spring-starter"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",metastring:'title = "application.yml"',children:"jimmer:\n    #highlight-next-line\n    default-reference-fetch-type: JOIN_IF_NO_CACHE\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Using original jimmer"}),"\n",(0,i.jsxs)(a.A,{groupId:"language",children:[(0,i.jsx)(o.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"JSqlClient sqlClient = JSqlClient.newBuilder()\n    // highlight-next-line\n    .setDefaultListBatchSize(ReferenceFetchType.JOIN_IF_NO_CACHE)\n    .build();\n"})})}),(0,i.jsx)(o.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val sqlClient = newKSqlClient {\n    // highlight-next-line\n    setDefaultListBatchSize(ReferenceFetchType.JOIN_IF_NO_CACHE)\n}\n"})})})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.p,{children:"Note:"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["When setting the global configuration, you cannot specify ",(0,i.jsx)(n.code,{children:"ReferenceFetchType.AUTO"}),", otherwise an exception will be thrown"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["If no global configuration is set, then ",(0,i.jsx)(n.code,{children:"ReferenceFetchType.AUTO"})," in the object fetcher ",(0,i.jsx)(n.em,{children:"(whether explicitly specified or by default)"})," will be interpreted as ",(0,i.jsx)(n.code,{children:"ReferenceFetchType.SELECT"})]}),"\n"]}),"\n"]})]})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(b,{...e})}):b(e)}},19365:(e,n,s)=>{s.d(n,{A:()=>a});s(96540);var t=s(34164);const i={tabItem:"tabItem_Ymn6"};var l=s(74848);function a(e){let{children:n,hidden:s,className:a}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,a),hidden:s,children:n})}},11470:(e,n,s)=>{s.d(n,{A:()=>T});var t=s(96540),i=s(34164),l=s(23104),a=s(56347),o=s(205),r=s(57485),c=s(31682),h=s(70679);function d(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:s}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:s,attributes:t,default:i}}=e;return{value:n,label:s,attributes:t,default:i}}))}(s);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function j(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:s}=e;const i=(0,a.W6)(),l=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,r.aZ)(l),(0,t.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(i.location.search);n.set(l,e),i.replace({...i.location,search:n.toString()})}),[l,i])]}function b(e){const{defaultValue:n,queryString:s=!1,groupId:i}=e,l=u(e),[a,r]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!j({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=s.find((e=>e.default))??s[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:l}))),[c,d]=x({queryString:s,groupId:i}),[b,p]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,l]=(0,h.Dv)(s);return[i,(0,t.useCallback)((e=>{s&&l.set(e)}),[s,l])]}({groupId:i}),_=(()=>{const e=c??b;return j({value:e,tabValues:l})?e:null})();(0,o.A)((()=>{_&&r(_)}),[_]);return{selectedValue:a,selectValue:(0,t.useCallback)((e=>{if(!j({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);r(e),d(e),p(e)}),[d,p,l]),tabValues:l}}var p=s(92303);const _={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=s(74848);function f(e){let{className:n,block:s,selectedValue:t,selectValue:a,tabValues:o}=e;const r=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.a_)(),h=e=>{const n=e.currentTarget,s=r.indexOf(n),i=o[s].value;i!==t&&(c(n),a(i))},d=e=>{let n=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const s=r.indexOf(e.currentTarget)+1;n=r[s]??r[0];break}case"ArrowLeft":{const s=r.indexOf(e.currentTarget)-1;n=r[s]??r[r.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":s},n),children:o.map((e=>{let{value:n,label:s,attributes:l}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>r.push(e),onKeyDown:d,onClick:h,...l,className:(0,i.A)("tabs__item",_.tabItem,l?.className,{"tabs__item--active":t===n}),children:s??n},n)}))})}function m(e){let{lazy:n,children:s,selectedValue:l}=e;const a=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===l));return e?(0,t.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==l})))})}function y(e){const n=b(e);return(0,g.jsxs)("div",{className:(0,i.A)("tabs-container",_.tabList),children:[(0,g.jsx)(f,{...n,...e}),(0,g.jsx)(m,{...n,...e})]})}function T(e){const n=(0,p.A)();return(0,g.jsx)(y,{...e,children:d(e.children)},String(n))}},66971:(e,n,s)=>{s.d(n,{a:()=>b});var t=s(96540),i=s(72774),l=s(63051),a=s(28968),o=s(48875),r=s(44676),c=s(47859),h=s(4671),d=s(99343),u=s(7324),j=s(39781),x=s(74848);const b=(0,t.memo)((e=>{let{open:n,fullScreen:s=!1,title:o,maxWidth:b="md",onClose:_,children:g}=e;const[f,m]=(0,t.useState)(s),y=(0,t.useCallback)((()=>{m((e=>!e))}),[]);return(0,x.jsxs)(l.A,{open:n,onClose:_,fullScreen:f,TransitionComponent:p,maxWidth:b,children:[(0,x.jsx)(i.A,{sx:{position:"relative"},children:(0,x.jsxs)(r.A,{children:[(0,x.jsx)(c.A,{sx:{ml:2,flex:1},variant:"h6",component:"div",children:o}),(0,x.jsx)(h.A,{onClick:y,style:{color:"white"},children:f?(0,x.jsx)(u.A,{}):(0,x.jsx)(d.A,{})}),(0,x.jsx)(h.A,{"aria-label":"close",onClick:_,style:{color:"white"},children:(0,x.jsx)(j.A,{})})]})}),(0,x.jsx)(a.A,{children:g})]})})),p=t.forwardRef((function(e,n){return(0,x.jsx)(o.A,{direction:"up",ref:n,...e})}))},74400:(e,n,s)=>{s.d(n,{l:()=>o});var t=s(96540),i=s(67512),l=s(66971),a=s(74848);const o=(0,t.memo)((e=>{let{buttonText:n,fullScreen:s=!1,title:o=n,variant:r="outlined",large:c=!1,maxWidth:h,useOriginalText:d=!0,children:u}=e;const[j,x]=(0,t.useState)(!1),b=(0,t.useCallback)((e=>{x(!0),e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),[]),p=(0,t.useCallback)((()=>{x(!1)}),[]),_=d?{textTransform:"none"}:{};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.A,{"data-is-view-more-button":"true",onClick:b,variant:r,size:c?"large":"small",style:_,children:n}),(0,a.jsx)(l.a,{open:j,onClose:p,title:o,maxWidth:h,fullScreen:s,children:u})]})}))},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(96540);const i={},l=t.createContext(i);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);