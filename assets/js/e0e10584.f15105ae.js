"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[8967],{7082:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"spring/repository/default","title":"Complex Queries","description":"In the previous document, we introduced adding abstract methods to custom Repository interfaces following certain conventions, which are implemented automatically by Jimmer.","source":"@site/docs/spring/repository/default.mdx","sourceDirName":"spring/repository","slug":"/spring/repository/default","permalink":"/jimmer-doc/docs/spring/repository/default","draft":false,"unlisted":false,"editUrl":"https://github.com/babyfish-ct/jimmer-doc/edit/main/docs/spring/repository/default.mdx","tags":[],"version":"current","lastUpdatedAt":1741228772000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Complex Queries"},"sidebar":"tutorialSidebar","previous":{"title":"Simple Queries","permalink":"/jimmer-doc/docs/spring/repository/abstract"},"next":{"title":"Query DTO","permalink":"/jimmer-doc/docs/spring/repository/dto"}}');var i=t(74848),a=t(28453),o=t(11470),s=t(19365);const l={sidebar_position:3,title:"Complex Queries"},c=void 0,d={},h=[{value:"Dynamic WHERE",id:"dynamic-where",level:2},{value:"Dynamic JOIN",id:"dynamic-join",level:2},{value:"Subqueries",id:"subqueries",level:2},{value:"Dynamic ORDER BY",id:"dynamic-order-by",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Object Fetcher",id:"object-fetcher",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.a,{href:"./abstract",children:"previous document"}),", we introduced adding abstract methods to custom Repository interfaces following certain conventions, which are implemented automatically by Jimmer."]}),"\n",(0,i.jsx)(n.p,{children:"However, this approach has some issues:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Results in very long method names"}),"\n",(0,i.jsx)(n.li,{children:"Cannot implement complex query logic"}),"\n",(0,i.jsx)(n.li,{children:"If developers add methods violating conventions, it leads to startup failures rather than compile time errors"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"So Jimmer provides another approach that allows developers to write queries themselves and control all details."}),"\n",(0,i.jsxs)(n.p,{children:["To maximize the safety of static languages, Jimmer provides a strongly typed SQL DSL, rather than weak, string-based solutions like ",(0,i.jsx)(n.a,{href:"https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/Query.html",children:"Spring Data JPA's @Query"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"In Jimmer, query logic can be directly implemented in default methods of the Repository interface."}),"\n",(0,i.jsx)(n.h2,{id:"dynamic-where",children:"Dynamic WHERE"}),"\n",(0,i.jsxs)(o.A,{groupId:"language",children:[(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="BookRepository.java"',children:"package com.example.repository;\n\nimport com.example.model.Book;\nimport com.example.model.BookTable;\n\nimport org.babyfish.jimmer.spring.repository.JRepository;\nimport org.jetbrains.annotations.Nullable;\nimport org.springframework.util.StringUtils;\n\npublic interface BookRepository extends JRepository<Book, Long> {\n\n    BookTable table = Tables.BOOK_TABLE; \u2776\n\n    default List<Book> find(@Nullable String name) {\n        return sql() \u2777\n            .createQuery(table)\n            .whereIf( \u2778\n                StringUtils.hasText(name),\n                table.name().ilike(name)\n            )\n            .orderBy(table.name())\n            .orderBy(table.edition().desc())\n            .select(table) \u2779\n            .execute(); \u277a\n    }\n}\n"})})}),(0,i.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",metastring:'title="BookRepository.kt"',children:"package com.example.repository\n\nimport com.example.model.Book\n\nimport org.babyfish.jimmer.spring.repository.KRepository\nimport org.babyfish.jimmer.sql.kt.ast.expression.*\n\ninterface BookRepository : KRepository<Book, Long> {\n\n    fun find(name: String? = null): List<Book> =\n        sql \u2777\n            .createQuery(Book::class) { \u2776\n                name?.takeIf { it.isNotEmpty() }?.let { \u2778\n                    where(table.name ilike it)\n                }\n                orderBy(table.name)\n                orderBy(table.edition.desc())\n                select(table) \u2779\n            }\n            .execute() \u277a\n}\n"})})})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u2776"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Java: The parent query is based on the table object ",(0,i.jsx)(n.code,{children:"Tables.BOOK"}),", renamed to ",(0,i.jsx)(n.code,{children:"table"})," for convenience."]}),"\n",(0,i.jsx)(n.p,{children:"This rename applies to all default methods of the current interface, so declaring it as a static interface variable is appropriate."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Kotlin: ",(0,i.jsx)(n.code,{children:"createQuery"})," accepts a lambda expression which switches the meaning of ",(0,i.jsx)(n.code,{children:"this"}),", so code inside the lambda can directly use the ",(0,i.jsx)(n.code,{children:"table"})," variable."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u2777"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Java: The ",(0,i.jsx)(n.code,{children:"sql()"})," method inherited from ",(0,i.jsx)(n.code,{children:"JRepository"})," returns ",(0,i.jsx)(n.code,{children:"org.babyfish.jimmer.sql.JSqlClient"}),", which is the total entry point for Java API of the SQL DSL."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Kotlin: The ",(0,i.jsx)(n.code,{children:"sql"})," property inherited from ",(0,i.jsx)(n.code,{children:"KRepository"})," returns ",(0,i.jsx)(n.code,{children:"org.babyfish.jimmer.sql.kt.KSqlClient"}),", which is the total entry point for Kotlin API of the SQL DSL."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u2778 Only add the where condition when the query parameter is non-null and string length is non-zero."}),"\n",(0,i.jsx)(n.p,{children:"Obviously, this query is dynamic."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u2779 The ",(0,i.jsx)(n.code,{children:"select"})," statement is always at the end. Before ",(0,i.jsx)(n.code,{children:"select"}),", the query has no return type; only after ",(0,i.jsx)(n.code,{children:"select"})," can the return type of the query be determined. This is why ",(0,i.jsx)(n.code,{children:"select"})," appears at the end."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The practice of putting ",(0,i.jsx)(n.code,{children:"select"})," at the end is not originally invented by Jimmer, it was first introduced in ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/",children:"C# linq"}),"."]})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u277a Between ",(0,i.jsx)(n.code,{children:"select"})," and ",(0,i.jsx)(n.code,{children:"execute"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["In Java, the expression type is ",(0,i.jsx)(n.code,{children:"TypedRootQuery<Book>"})]}),"\n",(0,i.jsxs)(n.li,{children:["In Kotlin, the expression type is ",(0,i.jsx)(n.code,{children:"KTypedRootQuery<Book>"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["But neither is ",(0,i.jsx)(n.code,{children:"List<Book>"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["This represents a query that is created but not yet executed. It needs to call ",(0,i.jsx)(n.code,{children:"execute"})," to actually execute it to get the final result ",(0,i.jsx)(n.code,{children:"List<Book>"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The query is not executed immediately after creation, ",(0,i.jsx)(n.code,{children:"execute"})," must be called to execute it. This is not a design flaw, but an important capability that the ",(0,i.jsx)(n.a,{href:"#pagination",children:"pagination query"})," section will illustrate."]})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"execute"})," is not the only execution method, in addition to ",(0,i.jsx)(n.code,{children:"execute"}),", there are other execution methods:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Return Type"}),(0,i.jsx)(n.th,{children:"Note"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:["execute ",(0,i.jsx)(n.em,{children:"(as shown in this example)"})]}),(0,i.jsx)(n.td,{children:"List<T>"}),(0,i.jsx)(n.td,{children:"Returns a list"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"fetchOne"}),(0,i.jsxs)(n.td,{children:["T ",(0,i.jsx)(n.em,{children:"(cannot be null)"})]}),(0,i.jsx)(n.td,{children:"Returns one record, throws exception if no data or multiple data"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"fetchOneOrNull"}),(0,i.jsxs)(n.td,{children:["T ",(0,i.jsx)(n.em,{children:"(can be null)"})]}),(0,i.jsx)(n.td,{children:"Returns one record, throws exception if multiple data"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:["fetchOptional ",(0,i.jsx)(n.em,{children:"(Java only)"})]}),(0,i.jsx)(n.td,{children:"Optional wrapping of T or null"}),(0,i.jsx)(n.td,{children:"Returns one record, throws exception if multiple data"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"forEach"}),(0,i.jsx)(n.td,{children:"No return"}),(0,i.jsx)(n.td,{children:"Use when data volume is large, don't want to build collection, just iterate"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"All these execution methods have two overloaded versions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Version without parameters (current example): Execute based on JDBC connection managed by Spring transaction. Should be called in most cases."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Version with ",(0,i.jsx)(n.code,{children:"java.sql.Connection"})," parameter: Execute based on the JDBC connection specified by the user."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Usage:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Do not specify parameter"}),"\n",(0,i.jsxs)(o.A,{groupId:"language",children:[(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"List<Book> books = bookRepository\n    .find(null);\n"})})}),(0,i.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val books = bookRepository.find()\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"The generated SQL is (formatted for readability):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select tb_1_.ID, tb_1_.NAME, tb_1_.EDITION, tb_1_.PRICE, tb_1_.STORE_ID\nfrom BOOK as tb_1_\norder by\n    tb_1_.NAME asc,\n    tb_1_.EDITION desc \n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Specify parameter"}),"\n",(0,i.jsxs)(o.A,{groupId:"language",children:[(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'List<Book> books = bookRepository.find("G"); \n'})})}),(0,i.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val books = bookRepository.find("G")\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"The generated SQL is (formatted for readability):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select tb_1_.ID, tb_1_.NAME, tb_1_.EDITION, tb_1_.PRICE, tb_1_.STORE_ID\nfrom BOOK as tb_1_\nwhere\n    /* highlight-next-line */\n    lower(tb_1_.NAME) like ? /* %g% */\norder by\n    tb_1_.NAME asc,\n    tb_1_.EDITION desc\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"dynamic-join",children:"Dynamic JOIN"}),"\n",(0,i.jsxs)(n.p,{children:["Next, add a ",(0,i.jsx)(n.code,{children:"storeName"})," parameter to this query method to filter on the ",(0,i.jsx)(n.code,{children:"name"})," property of ",(0,i.jsx)(n.code,{children:"BookStore"})," associated via the ",(0,i.jsx)(n.code,{children:"Book.store"})," property of the current ",(0,i.jsx)(n.code,{children:"Book"}),"."]}),"\n",(0,i.jsxs)(o.A,{groupId:"language",children:[(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="BookRepository.java"',children:"package com.example.repository;\n\nimport com.example.model.Book;\nimport com.example.model.BookTable;\n\nimport org.babyfish.jimmer.spring.repository.JRepository;\nimport org.jetbrains.annotations.Nullable;\nimport org.springframework.util.StringUtils;\n\npublic interface BookRepository extends JRepository<Book, Long> {\n\n    BookTable table = Tables.BOOK_TABLE;\n\n    default List<Book> find(\n        @Nullable String name,\n        // highlight-next-line \n        @Nullable String storeName\n    ) {\n        return sql()\n            .createQuery(table)\n            .whereIf(\n                StringUtils.hasText(name),\n                table.name().ilike(name)\n            )\n            // highlight-next-line\n            .whereIf(\n                StringUtils.hasText(storeName),\n                // highlight-next-line\n                table.store().name().ilike(storeName) \n            )\n            .orderBy(table.name())\n            .orderBy(table.edition().desc())\n            .select(table) \n            .execute();\n    }\n}\n"})})}),(0,i.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",metastring:'title="BookRepository.kt"',children:"package com.example.repository\n\nimport com.example.model.Book\n\nimport org.babyfish.jimmer.spring.repository.KRepository\nimport org.babyfish.jimmer.sql.kt.ast.expression.*\n\ninterface BookRepository : KRepository<Book, Long> {\n\n    fun find(\n        name: String? = null,\n        // highlight-next-line\n        storeName: String? = null\n    ): List<Book> =\n        sql\n            .createQuery(Book::class) {\n                name?.takeIf { it.isNotEmpty() }?.let {\n                    where(table.name ilike it)\n                }\n                // highlight-next-line\n                storeName?.takeIf { it.isNotEmpty() }?.let {\n                    // highlight-next-line\n                    table.store.name ilike it\n                }\n                orderBy(table.name)\n                orderBy(table.edition.desc())\n                select(table)\n            }\n            .execute()\n}\n"})})})]}),"\n",(0,i.jsxs)(n.p,{children:["Where Java's ",(0,i.jsx)(n.code,{children:"table.store().name()"})," or Kotlin's ",(0,i.jsx)(n.code,{children:"table.store.name"})," means:"]}),"\n",(0,i.jsxs)(n.p,{children:["Starting from the current queried object ",(0,i.jsx)(n.code,{children:"Book"}),", join to the ",(0,i.jsx)(n.code,{children:"BookStore"})," object via the association property ",(0,i.jsx)(n.code,{children:"Book.store"}),", and finally apply filter condition on the ",(0,i.jsx)(n.code,{children:"BookStore.name"})," property."]}),"\n",(0,i.jsxs)(n.p,{children:["Obviously, if the ",(0,i.jsx)(n.code,{children:"storeName"})," parameter is not specified, the final SQL will not contain JOIN, no need to demonstrate."]}),"\n",(0,i.jsxs)(n.p,{children:["So let's demonstrate the case where the ",(0,i.jsx)(n.code,{children:"storeName"})," parameter is specified."]}),"\n",(0,i.jsxs)(o.A,{groupId:"language",children:[(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'List<Book> books = bookRepository.find(null, "M");\n'})})}),(0,i.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val books = bookRepository.find(storeName = "M") \n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"The generated SQL is (formatted for readability):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select tb_1_.ID, tb_1_.NAME, tb_1_.EDITION, tb_1_.PRICE, tb_1_.STORE_ID\nfrom BOOK as tb_1_\n/* highlight-next-line */ \ninner join BOOK_STORE as tb_2_\n    on tb_1_.STORE_ID = tb_2_.ID\nwhere\n    lower(tb_2_.NAME) like ?  \norder by\n    tb_1_.NAME asc,\n    tb_1_.EDITION desc \n"})}),"\n",(0,i.jsx)(n.h2,{id:"subqueries",children:"Subqueries"}),"\n",(0,i.jsxs)(n.p,{children:["Next, add an ",(0,i.jsx)(n.code,{children:"authorName"})," parameter to this query method to filter on the ",(0,i.jsx)(n.code,{children:"firstName"})," or ",(0,i.jsx)(n.code,{children:"lastName"})," properties of ",(0,i.jsx)(n.code,{children:"Author"})," associated via ",(0,i.jsx)(n.code,{children:"Book.authors"})," property of the current ",(0,i.jsx)(n.code,{children:"Book"}),"."]}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{}),(0,i.jsxs)(n.p,{children:["Unfortunately, if you try to emulate the previous example's ",(0,i.jsx)(n.code,{children:"table.store.name"})," by writing ",(0,i.jsx)(n.code,{children:"table.authors.firstName"}),", you'll find there is no ",(0,i.jsx)(n.code,{children:"table.authors"})," option in the IDE auto-complete of ",(0,i.jsx)(n.code,{children:"table"}),"."]}),(0,i.jsxs)(n.p,{children:["This is because ",(0,i.jsx)(n.code,{children:"Book.authors"})," is a collection association (collective term for one-to-many and many-to-many associations). Blindly joining other objects via collection associations will lead to duplicate data in the query results. More importantly, this duplication is fatal for pagination queries to be shown later."]}),(0,i.jsxs)(n.p,{children:["For more details, please refer to ",(0,i.jsx)(n.a,{href:"../../query/dynamic-join/table-ex",children:"Pagination Safety"}),"."]}),(0,i.jsxs)(n.p,{children:["If you read ",(0,i.jsx)(n.a,{href:"../../query/dynamic-join/table-ex",children:"Pagination Safety"}),", you'll know you can force connecting via collection associations using ",(0,i.jsx)(n.code,{children:"table.asTableEx().authors"}),". However, this capability is not suitable for use here."]}),(0,i.jsx)(n.p,{children:"In short, Jimmer's API will subtly hint that this should be implemented using subqueries rather than JOIN."})]}),"\n",(0,i.jsxs)(o.A,{groupId:"language",children:[(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="BookRepository.java"',children:"package com.example.repository;\n\nimport com.example.model.AuthorTableEx;\nimport com.example.model.Book;\nimport com.example.model.BookTable;\n\nimport org.babyfish.jimmer.spring.repository.JRepository;\nimport org.jetbrains.annotations.Nullable;\nimport org.springframework.util.StringUtils;\n\npublic interface BookRepository extends JRepository<Book, Long> {\n\n    BookTable table = Tables.BOOK_TABLE;\n\n    default List<Book> find(\n        @Nullable String name,\n        @Nullable String storeName,\n        // highlight-next-line\n        @Nullable String authorName\n    ) {\n        AuthorTableEx author = TableExes.AUTHOR_TABLE_EX; \u2776\n\n        return sql()\n            .createQuery(table)\n            .whereIf(\n                StringUtils.hasText(name),\n                table.name().ilike(name)\n            )\n            .whereIf(\n                StringUtils.hasText(storeName),\n                table.store().name().ilike(storeName) \n            )\n            // highlight-next-line\n            .whereIf(\n                StringUtils.hasText(authorName),\n                table.id().in(\n                    sql()\n                        // highlight-next-line\n                        .createSubQuery(author) \u2777\n                        .where(\n                            Predicate.or(\n                                author.firstName().ilike(authorName),\n                                author.lastName().ilike(authorName)\n                            )\n                        )\n                        .select(\n                            author.books().id()\n                        )\n                )\n            )\n            .orderBy(table.name())\n            .orderBy(table.edition().desc())\n            .select(table) \n            .execute();\n    }\n}\n"})})}),(0,i.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",metastring:'title="BookRepository.kt" ',children:"package com.example.repository\n\nimport com.example.model.Author\nimport com.example.model.Book\n\nimport org.babyfish.jimmer.spring.repository.KRepository\nimport org.babyfish.jimmer.sql.kt.ast.expression.*\n\ninterface BookRepository : KRepository<Book, Long> {\n\n    fun find(\n        name: String? = null,\n        storeName: String? = null,\n        // highlight-next-line\n        authorName: String? = null\n    ): List<Book> =\n        sql\n            .createQuery(Book::class) {\n                name?.takeIf { it.isNotEmpty() }?.let {\n                    where(table.name ilike it)\n                }\n                storeName?.takeIf { it.isNotEmpty() }?.let {\n                    table.store.name ilike it\n                }\n                // highlight-next-line\n                authorName?.takeIf { it.isNotEmpty() }?.let {\n                    where(\n                        // highlight-next-line\n                        table.id valueIn subQuery(Author::class) { \u2776\u2777\n                            where(\n                                or(\n                                    table.firstName ilike it,\n                                    table.lastName ilike it\n                                )\n                            )\n                            select(table.books.id)\n                        }\n                    )\n                }\n                orderBy(table.name)\n                orderBy(table.edition.desc())\n                select(table)\n            }\n            .execute()\n}\n"})})})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u2776"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Java: The subquery is based on the global variable ",(0,i.jsx)(n.code,{children:"TableExes.AUTHOR_TABLE_EX"}),", alias it to ",(0,i.jsx)(n.code,{children:"author"})," for subsequent convenience."]}),"\n",(0,i.jsxs)(n.p,{children:["Here, the subquery is based on ",(0,i.jsx)(n.code,{children:"TableExes.AUTHOR_TABLE_EX"})," rather than ",(0,i.jsx)(n.code,{children:"Tables.AUTHOR_TABLE"})," so that ",(0,i.jsx)(n.code,{children:"select(table.books().id())"})," can compile."]}),"\n",(0,i.jsxs)(n.p,{children:["Please read ",(0,i.jsx)(n.a,{href:"../../query/dynamic-join/table-ex",children:"query/Pagination Safety"})," for more details."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Kotlin: ",(0,i.jsx)(n.code,{children:"subQuery"})," accepts a lambda expression where ",(0,i.jsx)(n.code,{children:"this"})," is redefined, so ",(0,i.jsx)(n.code,{children:"table"})," variable can be used directly inside, but note:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Inside subquery lambda: ",(0,i.jsx)(n.code,{children:"table"})," var represents ",(0,i.jsx)(n.code,{children:"KNonNullTableEx<Author>"})]}),"\n",(0,i.jsxs)(n.li,{children:["Outside subquery lambda, inside parent query lambda: ",(0,i.jsx)(n.code,{children:"table"})," var represents ",(0,i.jsx)(n.code,{children:"KNonNullTable<Book>"})]}),"\n",(0,i.jsxs)(n.li,{children:["If need to reference parent query table inside subquery (not shown in this example, usually used for correlated subqueries): please use ",(0,i.jsx)(n.code,{children:"parentTable"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u2777  Create subquery"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Obviously, if the ",(0,i.jsx)(n.code,{children:"authorName"})," parameter is not specified, the final SQL will not contain sub query, no need to demonstrate."]}),"\n",(0,i.jsxs)(n.p,{children:["So let's demonstrate the case where ",(0,i.jsx)(n.code,{children:"authorName"})," is specified."]}),"\n",(0,i.jsxs)(o.A,{groupId:"language",children:[(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'List<Book> books = bookRepository.find(null, null, "A"); \n'})})}),(0,i.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val books = bookRepository.find(authorName = "M")\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"The generated SQL is (formatted for readability):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select tb_1_.ID, tb_1_.NAME, tb_1_.EDITION, tb_1_.PRICE, tb_1_.STORE_ID\nfrom BOOK as tb_1_\nwhere\n    tb_1_.ID in (\n        /* highlight-next-line */\n        select tb_3_.BOOK_ID\n        from AUTHOR as tb_2_\n        inner join BOOK_AUTHOR_MAPPING as tb_3_\n            on tb_2_.ID = tb_3_.AUTHOR_ID\n        where\n            lower(tb_2_.FIRST_NAME) like ? /* %a% */ \n        or\n            lower(tb_2_.LAST_NAME) like ? /* %a% */ \n    )\norder by\n    tb_1_.NAME asc,\n    tb_1_.EDITION desc\n"})}),"\n",(0,i.jsx)(n.h2,{id:"dynamic-order-by",children:"Dynamic ORDER BY"}),"\n",(0,i.jsx)(n.p,{children:"So far, the sorting in our queries has been static. We expect to accept external parameters to achieve dynamic sorting."}),"\n",(0,i.jsxs)(n.p,{children:["Add a parameter of type ",(0,i.jsx)(n.code,{children:"org.springframework.data.domain.Sort"})," to the query method and use it to sort."]}),"\n",(0,i.jsxs)(o.A,{groupId:"language",children:[(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="BookRepository.java"  ',children:"package com.example.repository;\n\nimport com.example.model.AuthorTableEx;\nimport com.example.model.Book;\nimport com.example.model.BookTable;\n\nimport org.babyfish.jimmer.spring.repository.JRepository;\nimport org.babyfish.jimmer.spring.repository.SpringOrders;\nimport org.jetbrains.annotations.Nullable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.util.StringUtils;\n\npublic interface BookRepository extends JRepository<Book, Long> {\n\n    BookTable table = Tables.BOOK_TABLE;\n\n    default List<Book> find(\n        @Nullable String name,\n        @Nullable String storeName,\n        @Nullable String authorName,\n        // highlight-next-line\n        @Nullable Sort sort\n    ) {\n        AuthorTableEx author = TableExes.AUTHOR_TABLE_EX;\n\n        return sql()\n            .createQuery(table)\n            .whereIf(\n                StringUtils.hasText(name),\n                table.name().ilike(name)\n            )\n            .whereIf(\n                StringUtils.hasText(storeName),\n                table.store().name().ilike(storeName)\n            )\n            .whereIf(\n                StringUtils.hasText(authorName),\n                table.id().in(\n                    sql()\n                        .createSubQuery(author)\n                        .where(\n                            Predicate.or(\n                                author.firstName().ilike(authorName),\n                                author.lastName().ilike(authorName)\n                            )\n                        )\n                        .select(\n                            author.books().id()\n                        )\n                )\n            )\n            // highlight-next-line\n            .orderBy(SpringOrders.toOrders(table, sort))\n            .select(table)\n            .execute();\n    }\n}\n"})})}),(0,i.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",metastring:'title="BookRepository.kt"',children:"package com.example.repository\n\nimport com.example.model.Author\nimport com.example.model.Book\n\nimport org.babyfish.jimmer.spring.repository.KRepository\nimport org.babyfish.jimmer.spring.repository.orderBy\nimport org.babyfish.jimmer.sql.kt.ast.expression.*\nimport org.springframework.data.domain.Sort\n\ninterface BookRepository : KRepository<Book, Long> {\n\n    fun find(\n        name: String? = null,\n        storeName: String? = null,\n        authorName: String? = null,\n        // highlight-next-line\n        sort: Sort? = null\n    ): List<Book> =\n        sql\n            .createQuery(Book::class) {\n                name?.takeIf { it.isNotEmpty() }?.let {\n                    where(table.name ilike it)\n                }\n                storeName?.takeIf { it.isNotEmpty() }?.let {\n                    table.store.name ilike it\n                }\n                authorName?.takeIf { it.isNotEmpty() }?.let {\n                    where(\n                        table.id valueIn subQuery(Author::class) {\n                            where(\n                                or(\n                                    table.firstName ilike it,\n                                    table.lastName ilike it\n                                )\n                            )\n                            select(table.books.id)\n                        }\n                    )\n                }\n                // highlight-next-line\n                orderBy(sort)\n                select(table)\n            }\n            .execute()\n}\n"})})})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["For Java, ",(0,i.jsx)(n.code,{children:"org.babyfish.jimmer.spring.repository.SpringOrders.toOrders"})," is needed to convert the Spring Data Sort object to the sorting accepted by Jimmer."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["For Kotlin, ",(0,i.jsx)(n.code,{children:"org.babyfish.jimmer.spring.repository.orderBy"})," extends the capability of Jimmer's underlying SQL DSL, so the query object can sort based on the Spring Data Sort object."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["To facilitate the top-level code to accept sorting strings from the client, Jimmer provides the utility class ",(0,i.jsx)(n.code,{children:"org.babyfish.jimmer.spring.model.SortUtils"})," to convert the string passed from the frontend to ",(0,i.jsx)(n.code,{children:"org.springframework.data.domain.Sort"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"It can be used like:"}),"\n",(0,i.jsxs)(o.A,{groupId:"language",children:[(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Sort sort = SortUtils.toSort(\n    "store.name asc", "name asc", "edition desc"\n); \n'})})}),(0,i.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val sort = SortUtils.toSort(\n    "store.name asc", "name asc", "edition desc"\n)\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"or"}),"\n",(0,i.jsxs)(o.A,{groupId:"language",children:[(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Sort sort = SortUtils.toSort(\n    "store.name asc, name asc, edition desc"  \n);\n'})})}),(0,i.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val sort = SortUtils.toSort(\n    "store.name asc, name asc, edition desc"\n);\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"Now let's demonstrate the usage of dynamic sorting by specifying all other query parameters as null to focus on the sorting logic."}),"\n",(0,i.jsxs)(o.A,{groupId:"language",children:[(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'List<Book> books = bookRepository.find(\n    null,\n    null,\n    null, \n    SortUtils.toSort(\n        "store.name", // This sort implies JOIN\n        "price desc" \n    )\n);\n'})})}),(0,i.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val books = bookRepository.find(\n    sort = SortUtils.toSort(\n        "store.name", // This sort implies JOIN\n        "price desc"\n    )\n)\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"The generated SQL is (formatted for readability):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"select tb_1_.ID, tb_1_.NAME, tb_1_.EDITION, tb_1_.PRICE, tb_1_.STORE_ID\nfrom BOOK as tb_1_  \n/* Dynamic sort causes table join */\n/* highlight-next-line */ \nleft join BOOK_STORE as tb_2_\n    on tb_1_.STORE_ID = tb_2_.ID \n/* Dynamic sort */\n/* highlight-next-line */\norder by\n    tb_2_.NAME asc,\n    tb_1_.PRICE desc\n"})}),"\n",(0,i.jsx)(n.h2,{id:"pagination",children:"Pagination"}),"\n",(0,i.jsx)(n.p,{children:"Let's continue improving the example by adding pagination capability."}),"\n",(0,i.jsx)(n.p,{children:"To implement pagination, need:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Replace the ",(0,i.jsx)(n.code,{children:"org.springframework.data.domain.Sort"})," type parameter with ",(0,i.jsx)(n.code,{children:"org.springframework.data.domain.Pageable"})," ",(0,i.jsxs)(n.em,{children:["(",(0,i.jsx)(n.code,{children:"Pageable"})," contains ",(0,i.jsx)(n.code,{children:"Sort"}),")"]})]}),"\n",(0,i.jsxs)(n.li,{children:["Change return value from ",(0,i.jsx)(n.code,{children:"java.util.List<Book>"})," to ",(0,i.jsx)(n.code,{children:"org.springframework.data.domain.Page<Book>"})]}),"\n",(0,i.jsx)(n.li,{children:"Internally use specific APIs to achieve pagination in one statement"}),"\n"]}),"\n",(0,i.jsxs)(o.A,{groupId:"language",children:[(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="BookRepository.java" ',children:"package com.example.repository;\n\nimport com.example.model.AuthorTableEx;\nimport com.example.model.Book;\nimport com.example.model.BookTable;\n\nimport org.babyfish.jimmer.spring.repository.JRepository;\nimport org.babyfish.jimmer.spring.repository.SpringOrders;\nimport org.jetbrains.annotations.Nullable;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.util.StringUtils;\n\npublic interface BookRepository extends JRepository<Book, Long> {\n\n    BookTable table = Tables.BOOK_TABLE;\n\n    default Page<Book> find( \u2776\n        @Nullable String name,\n        @Nullable String storeName,\n        @Nullable String authorName,\n        // highlight-next-line  \n        Pageable pageable \u2777\n    ) {\n        AuthorTableEx author = TableExes.AUTHOR_TABLE_EX;\n\n        // highlight-next-line\n        return pager(pageable).execute( \u2778\n            sql()\n                .createQuery(table)\n                .whereIf(\n                    StringUtils.hasText(name),\n                    table.name().ilike(name)\n                )\n                .whereIf(\n                    StringUtils.hasText(storeName),\n                    table.store().name().ilike(storeName)\n                )\n                .whereIf(\n                    StringUtils.hasText(authorName),\n                    table.id().in(\n                        sql()\n                            .createSubQuery(author)\n                            .where(\n                                Predicate.or(\n                                    author.firstName().ilike(authorName),\n                                    author.lastName().ilike(authorName)\n                                )\n                            )\n                            .select(\n                                author.books().id()\n                            )\n                    )\n                )\n                .orderBy(SpringOrders.toOrders(table, pageable.getSort())) \u2779\n                .select(table)\n        );\n    }\n}\n"})})}),(0,i.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",metastring:'title="BookRepository.kt"  ',children:"package com.example.repository\n\nimport com.example.model.Author\nimport com.example.model.Book\n\nimport org.babyfish.jimmer.spring.repository.KRepository\nimport org.babyfish.jimmer.spring.repository.orderBy\nimport org.babyfish.jimmer.sql.kt.ast.expression.*\nimport org.springframework.data.domain.Page\nimport org.springframework.data.domain.Pageable\n\ninterface BookRepository : KRepository<Book, Long> {\n\n    fun find(\n        name: String? = null,\n        storeName: String? = null,\n        authorName: String? = null,\n        // highlight-next-line\n        pageable: Pageable \u2777\n    ): Page<Book> = \u2776\n        sql\n            .createQuery(Book::class) {\n                name?.takeIf { it.isNotEmpty() }?.let {\n                    where(table.name ilike it)\n                }\n                storeName?.takeIf { it.isNotEmpty() }?.let {\n                    table.store.name ilike it\n                }\n                authorName?.takeIf { it.isNotEmpty() }?.let {\n                    where(\n                        table.id valueIn subQuery(Author::class) {\n                            where(\n                                or(\n                                    table.firstName ilike it,\n                                    table.lastName ilike it\n                                )\n                            )\n                            select(table.books.id)\n                        }\n                    )\n                }\n                orderBy(pageable.sort) \u2779\n                select(table)\n            }\n            // highlight-next-line\n            .fetchPage( \u2778\n                pageable.pageNumber,\n                pageable.pageSize\n            )\n}\n"})})})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u2776 Return ",(0,i.jsx)(n.code,{children:"org.springframework.data.domain.Page"})," rather than ",(0,i.jsx)(n.code,{children:"java.util.List"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u2777 Parameter becomes ",(0,i.jsx)(n.code,{children:"org.springframework.data.domain.Pageable"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u2778 Execute paged query"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Java"}),"\n",(0,i.jsxs)(n.p,{children:["Create a Pager object to paginate the original ",(0,i.jsx)(n.strong,{children:"unexecuted"})," query"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pager"})," is a method inherited from base interface ",(0,i.jsx)(n.code,{children:"JRepository/KRepository"})]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"pager"})," method has multiple overloaded versions, here the one called accepts a pagable object"]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"pager"})," method creates a ",(0,i.jsx)(n.code,{children:"Pager"})," object, which has an ",(0,i.jsx)(n.code,{children:"execute"})," method that accepts the ",(0,i.jsx)(n.strong,{children:"unexecuted"})," original query"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Kotlin"}),"\n",(0,i.jsxs)(n.p,{children:["Kotlin API provides the extension method ",(0,i.jsx)(n.code,{children:"fetchPage"})," for ",(0,i.jsx)(n.code,{children:"KConfigurableRootQuery<*, E>"})," types to implement paged queries"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u2779 Get sort object from pageable to perform dynamic sorting"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Now let's demonstrate the usage of paging query by specifying all other query parameters as null to focus on the pagination logic."}),"\n",(0,i.jsxs)(o.A,{groupId:"language",children:[(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'List<Book> books = bookRepository.find(\n    null,\n    null,\n    null,\n    PageRequest.of(\n        1, // zero based, 1 means second page\n        5,\n        SortUtils.toSort("name, edition desc")\n    )\n);\n'})})}),(0,i.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val books = bookRepository.find(\n    pageable = PageRequest.of(\n        1, // zero based, 1 means second page\n        5,\n        SortUtils.toSort("name, edition desc")\n    )\n)\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"The returned Page object is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    // highlight-next-line\n    "content":[\n        {\n            "id":10,\n            "name":"GraphQL in Action",\n            "edition":1,\n            "price":80,\n            "store":{\n                "id":2\n            }\n        },\n        {\n            "id":3,\n            "name":"Learning GraphQL",\n            "edition":3,\n            "price":51,\n            "store":{\n                "id":1\n            }\n        },\n        {\n            "id":2,\n            "name":"Learning GraphQL",\n            "edition":2,\n            "price":55,\n            "store":{\n                "id":1\n            }\n        },\n        {\n            "id":1,\n            "name":"Learning GraphQL",\n            "edition":1,\n            "price":45,\n            "store":{\n                "id":1\n            }\n        },\n        {\n            "id":9,\n            "name":"Programming TypeScript",\n            "edition":3,\n            "price":48,\n            "store":{\n                "id":1\n            }\n        }\n    ],\n    "pageable":{\n        "sort":{\n            "unsorted":false,\n            "sorted":true,\n            "empty":false\n        },\n        "pageNumber":1,\n        "pageSize":5,\n        "offset":5,\n        "paged":true,\n        "unpaged":false\n    },\n    // highlight-start\n    "totalPages":3,\n    "totalElements":12, \n    "last":false,\n    "numberOfElements":5,\n    // highlight-end\n    "first":false,\n    "sort":{\n        "unsorted":false,\n        "sorted":true,\n        "empty":false\n    },\n    "number":1,\n    "size":5,\n    "empty":false\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"The generated SQL is (formatted for readability):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"/* Step 1: Query total rows before pagination */\nselect count(tb_1_.ID) from BOOK as tb_1_  \n\n/* Step 2: Query data within one page */\nselect tb_1_.ID, tb_1_.NAME, tb_1_.EDITION, tb_1_.PRICE, tb_1_.STORE_ID\nfrom BOOK as tb_1_\norder by \n    tb_1_.NAME asc,\n    tb_1_.EDITION desc\n/* MySQL pagination */  \n/* highlight-next-line */\nlimit ?, /* 5(offset) */ ? /* 5(limit) */\n"})}),"\n",(0,i.jsx)(n.h2,{id:"object-fetcher",children:"Object Fetcher"}),"\n",(0,i.jsx)(n.p,{children:"Object fetchers are one of Jimmer's signature features, allowing querying of arbitrary complex data structures instead of just simple entity objects."}),"\n",(0,i.jsx)(n.p,{children:"To use it, need:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Add a parameter of type ",(0,i.jsx)(n.code,{children:"org.babyfish.jimmer.sql.fetcher.Fetcher<Current Entity>"})]}),"\n",(0,i.jsxs)(n.li,{children:["Change the ",(0,i.jsx)(n.code,{children:"select"})," call of the top-level query from ",(0,i.jsx)(n.code,{children:"select(table)"})," to ",(0,i.jsx)(n.code,{children:"select(table.fetch(fetcher))"})]}),"\n"]}),"\n",(0,i.jsxs)(o.A,{groupId:"language",children:[(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="BookRepository.java"',children:"package com.example.repository;\n\nimport com.example.model.AuthorTableEx;\nimport com.example.model.Book;\nimport com.example.model.BookTable;\n\nimport org.babyfish.jimmer.spring.repository.JRepository;\nimport org.babyfish.jimmer.spring.repository.SpringOrders;\nimport org.babyfish.jimmer.sql.fetcher.Fetcher;\nimport org.jetbrains.annotations.Nullable;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.util.StringUtils;\n\npublic interface BookRepository extends JRepository<Book, Long> {\n\n    BookTable table = Tables.BOOK_TABLE;\n\n    default Page<Book> find(\n        @Nullable String name,\n        @Nullable String storeName,\n        @Nullable String authorName,\n        Pageable pageable,\n        // highlight-next-line\n        @Nullable Fetcher<Book> fetcher\n    ) {\n        AuthorTableEx author = TableExes.AUTHOR_TABLE_EX;\n\n        return pager(pageable).execute(\n            sql()\n                .createQuery(table)\n                .whereIf(\n                    StringUtils.hasText(name),\n                    table.name().ilike(name)\n                )\n                .whereIf(\n                    StringUtils.hasText(storeName),\n                    table.store().name().ilike(storeName)\n                )\n                .whereIf(\n                    StringUtils.hasText(authorName),\n                    table.id().in(\n                        sql()\n                            .createSubQuery(author)\n                            .where(\n                                Predicate.or(\n                                    author.firstName().ilike(authorName), \n                                    author.lastName().ilike(authorName)\n                                )\n                            )\n                            .select(\n                                author.books().id()\n                            )\n                    )\n                )\n                .orderBy(SpringOrders.toOrders(table, pageable.getSort()))\n                .select(\n                    // highlight-next-line\n                    table.fetch(fetcher) \n                )\n        );\n    }\n}\n"})})}),(0,i.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",metastring:'title="BookRepository.kt"',children:"package com.example.repository\n\nimport com.example.model.Author\nimport com.example.model.Book\n\nimport org.babyfish.jimmer.spring.repository.KRepository\nimport org.babyfish.jimmer.spring.repository.orderBy\nimport org.babyfish.jimmer.sql.fetcher.Fetcher;\nimport org.babyfish.jimmer.sql.kt.ast.expression.*\nimport org.springframework.data.domain.Page\nimport org.springframework.data.domain.Pageable\n\ninterface BookRepository : KRepository<Book, Long> {\n\n    fun find(\n        name: String? = null,\n        storeName: String? = null,\n        authorName: String? = null,\n        pageable: Pageable,\n        // highlight-next-line\n        fetcher: Fetcher<Book>? = null\n    ): Page<Book> =\n        sql\n            .createQuery(Book::class) {\n                name?.takeIf { it.isNotEmpty() }?.let {\n                    where(table.name ilike it)\n                }\n                storeName?.takeIf { it.isNotEmpty() }?.let {\n                    table.store.name ilike it\n                }\n                authorName?.takeIf { it.isNotEmpty() }?.let {\n                    where(\n                        table.id valueIn subQuery(Author::class) {\n                            where(\n                                or(\n                                    table.firstName ilike it,\n                                    table.lastName ilike it\n                                )\n                            )\n                            select(table.books.id)\n                        }\n                    )\n                }\n                orderBy(pageable.sort)\n                select(\n                    // highlight-next-line\n                    table.fetch(fetcher)\n                )\n            }\n            // highlight-next-line\n            .fetchPage(\n                pageable.pageNumber,\n                pageable.pageSize\n            )\n}\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"If no fetcher is passed or simple object shape is passed, the result will necessarily be similar to previous examples, no need to repeat."}),"\n",(0,i.jsx)(n.p,{children:"So let's just demonstrate querying a complex data structure directly. To focus on the object fetcher, all other query parameters are specified as null except the fetcher."}),"\n",(0,i.jsxs)(o.A,{groupId:"language",children:[(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Page<Book> page = bookRepository\n    .find(\n        null,\n        null,\n        null,\n        PageRequest.of(\n            1, // zero based, 1 means second page\n            5,\n            SortUtils.toSort("name, edition desc")\n        ),\n        // highlight-next-line\n        Fetchers.BOOK_FETCHER\n            .allScalarFields()\n            // highlight-next-line\n            .store(\n                Fetchers.BOOK_FETCHER\n                    .name() // associated object only queries id (implicit+mandatory) and name\n            )\n            // highlight-next-line\n            .authors(\n                Fetchers.AUTHOR_FETCHER\n                    // associated object only queries id (implicit+mandatory), firstName and lastName\n                    .firstName().lastName()\n            )\n    );\n'})})}),(0,i.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val page = bookRepository\n    .find(\n        pageable = PageRequest.of(\n            1, // zero based, 1 means second page\n            5,\n            SortUtils.toSort("name, edition desc")\n        ),\n        // highlight-next-line\n        fetcher = newFetcher(Book::class).by {\n            allScalarFields()\n            // highlight-next-line\n            store {\n                // associated object only queries \n                // id (implicit+mandatory) and name\n                name()\n            }\n            // highlight-next-line\n            authors {\n                // associated object only queries \n                // id (implicit+mandatory), firstName and lastName\n                firstName()\n                lastName()\n            }\n        }\n    )\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"The returned Page object is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "content":[\n        {\n            "id":10,\n            "name":"GraphQL in Action",\n            "edition":1,\n            "price":80,\n            // highlight-next-line\n            "store":{\n                "id":2,\n                "name":"MANNING"\n            },\n            // highlight-next-line\n            "authors":[\n                {\n                    "id":5,\n                    "firstName":"Samer",\n                    "lastName":"Buna"\n                }\n            ]\n        },\n        {\n            "id":3,\n            "name":"Learning GraphQL",\n            "edition":3,\n            "price":51,\n            // highlight-next-line\n            "store":{\n                "id":1,\n                "name":"O\'REILLY"\n            },\n            // highlight-next-line\n            "authors":[\n                {\n                    "id":2,\n                    "firstName":"Alex",\n                    "lastName":"Banks"\n                },\n                {\n                    "id":1,\n                    "firstName":"Eve",\n                    "lastName":"Procello"\n                }\n            ]\n        },\n        {\n            "id":2,\n            "name":"Learning GraphQL",\n            "edition":2,\n            "price":55,\n            // highlight-next-line\n            "store":{\n                "id":1,\n                "name":"O\'REILLY"\n            },\n            // highlight-next-line\n            "authors":[\n                {\n                    "id":2,\n                    "firstName":"Alex",\n                    "lastName":"Banks"\n                },\n                {\n                    "id":1,\n                    "firstName":"Eve",\n                    "lastName":"Procello"\n                }\n            ]\n        },\n        {\n            "id":1,\n            "name":"Learning GraphQL",\n            "edition":1,\n            "price":45,\n            // highlight-next-line\n            "store":{\n                "id":1,\n                "name":"O\'REILLY"\n            },\n            // highlight-next-line\n            "authors":[\n                {\n                    "id":2,\n                    "firstName":"Alex",\n                    "lastName":"Banks"\n                },\n                {\n                    "id":1,\n                    "firstName":"Eve",\n                    "lastName":"Procello"\n                }\n            ]\n        },\n        {\n            "id":9,\n            "name":"Programming TypeScript",\n            "edition":3,\n            "price":48,\n            // highlight-next-line\n            "store":{\n                "id":1,\n                "name":"O\'REILLY"\n            },\n            // highlight-next-line\n            "authors":[\n                {\n                    "id":4,\n                    "firstName":"Boris",\n                    "lastName":"Cherny"\n                }\n            ]\n        }\n    ],\n    "pageable":{\n        "sort":{\n            "unsorted":false,\n            "sorted":true,\n            "empty":false\n        },\n        "pageNumber":1,\n        "pageSize":5,\n        "offset":5,\n        "paged":true,\n        "unpaged":false\n    },\n    "totalPages":3,\n    "totalElements":12,\n    "last":false,\n    "sort":{\n        "unsorted":false,\n        "sorted":true,\n        "empty":false\n    },\n    "numberOfElements":5,\n    "number":1,  \n    "first":false,\n    "size":5,\n    "empty":false\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"The generated SQL is (formatted for readability):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"/* Step 1: Query total rows before pagination */\nselect count(tb_1_.ID) from BOOK as tb_1_\n\n/* Step 2: Query aggregate root objects within one page */\nselect tb_1_.ID, tb_1_.NAME, tb_1_.EDITION, tb_1_.PRICE, tb_1_.STORE_ID  \nfrom BOOK as tb_1_\norder by\n    tb_1_.NAME asc,\n    tb_1_.EDITION desc\n/* MySQL pagination */\nlimit ?, /* 5(offset) */ ? /*  5(limit) */  \n\n/* \n * Step 3: For the 5 paged data (not 12 rows before paging),  \n * query the associated objects of property `Book.store`\n * \n * Note:\n * Here the foreign key `STORE_ID` of the 5 records will be queried,\n * so finding parent objects directly via foreign key. \n * Although there are 5 rows of data, the foreign keys only  \n * have two distinct values, so only two SQL params.\n */\nselect tb_1_.ID, tb_1_.NAME\nfrom BOOK_STORE as tb_1_\nwhere tb_1_.ID in (\n    ?/* 2 */, ?/* 1 */\n)\n\n/* \n * Step 4: For the 5 paged data (not 12 rows before paging),\n * query the associated objects of property `Book.authors` \n */  \nselect tb_2_.BOOK_ID, tb_1_.ID, tb_1_.FIRST_NAME, tb_1_.LAST_NAME\nfrom AUTHOR as tb_1_\ninner join BOOK_AUTHOR_MAPPING as tb_2_\n    on tb_1_.ID = tb_2_.AUTHOR_ID\nwhere tb_2_.BOOK_ID in (\n    ?/* 10 */, ?/* 3 */, ?/* 2 */, ?/* 1 */, ?/* 9 */\n)\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["Whether it is complex queries discussed in this article, or simple queries discussed in ",(0,i.jsx)(n.a,{href:"./abstract",children:"previous article"}),", as long as the query returns entity objects or their collections rather than simple column tuples, it is highly recommended to add a ",(0,i.jsx)(n.code,{children:"Fetcher"})," parameter to make all object queries as powerful in data structure shaping as ",(0,i.jsx)(n.code,{children:"GraphQL"}),"."]}),(0,i.jsx)(n.p,{children:"This brings great convenience to higher level business code."})]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var r=t(34164);const i={tabItem:"tabItem_Ymn6"};var a=t(74848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,o),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>N});var r=t(96540),i=t(34164),a=t(23104),o=t(56347),s=t(205),l=t(57485),c=t(31682),d=t(70679);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:i}}=e;return{value:n,label:t,attributes:r,default:i}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function u(e){let{queryString:n=!1,groupId:t}=e;const i=(0,o.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(i.location.search);n.set(a,e),i.replace({...i.location,search:n.toString()})}),[a,i])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,a=m(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:a}))),[c,h]=u({queryString:t,groupId:i}),[g,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,a]=(0,d.Dv)(t);return[i,(0,r.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:i}),x=(()=>{const e=c??g;return p({value:e,tabValues:a})?e:null})();(0,s.A)((()=>{x&&l(x)}),[x]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),b(e)}),[h,b,a]),tabValues:a}}var b=t(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(74848);function f(e){let{className:n,block:t,selectedValue:r,selectValue:o,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),i=s[t].value;i!==r&&(c(n),o(i))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>l.push(e),onKeyDown:h,onClick:d,...a,className:(0,i.A)("tabs__item",x.tabItem,a?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function y(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function k(e){const n=g(e);return(0,j.jsxs)("div",{className:(0,i.A)("tabs-container",x.tabList),children:[(0,j.jsx)(f,{...n,...e}),(0,j.jsx)(y,{...n,...e})]})}function N(e){const n=(0,b.A)();return(0,j.jsx)(k,{...e,children:h(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(96540);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);