"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[8558],{26543:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>b,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"query/base-query","title":"Base-Query","description":"Base-Query refers to the unified term for Derived Table, CTE, and Recursive CTE in SQL.","source":"@site/docs/query/base-query.mdx","sourceDirName":"query","slug":"/query/base-query","permalink":"/jimmer-doc/docs/query/base-query","draft":false,"unlisted":false,"editUrl":"https://github.com/babyfish-ct/jimmer-doc/edit/main/docs/query/base-query.mdx","tags":[],"version":"current","lastUpdatedAt":1757948034000,"sidebarPosition":11,"frontMatter":{"sidebar_position":11,"title":"Base-Query"},"sidebar":"tutorialSidebar","previous":{"title":"Native SQL Expressions","permalink":"/jimmer-doc/docs/query/native-sql"},"next":{"title":"Global Filters","permalink":"/jimmer-doc/docs/query/global-filter/"}}');var l=t(74848),s=t(28453),a=t(11470),i=t(19365);const o={sidebar_position:11,title:"Base-Query"},c=void 0,h={},d=[{value:"Introduction to Derived Table",id:"introduction-to-derived-table",level:2},{value:"Reverse Projection Propagation",id:"reverse-projection-propagation",level:2},{value:"Unique Projection Column Settings for BaseQuery",id:"unique-projection-column-settings-for-basequery",level:3},{value:"Introduction to Reverse Projection Propagation Mechanism",id:"introduction-to-reverse-projection-propagation-mechanism",level:3},{value:"Projection Propagation for Set Operations",id:"projection-propagation-for-set-operations",level:3},{value:"Projection Column Merging",id:"projection-column-merging",level:3},{value:"Weak Join",id:"weak-join",level:2},{value:"Derived Table JOIN Derived Table",id:"derived-table-join-derived-table",level:3},{value:"Entity Table JOIN Derived Table",id:"entity-table-join-derived-table",level:3},{value:"CTE",id:"cte",level:2},{value:"Recursive-CTE",id:"recursive-cte",level:2}];function u(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["Base-Query refers to the unified term for ",(0,l.jsx)(n.code,{children:"Derived Table"}),", ",(0,l.jsx)(n.code,{children:"CTE"}),", and ",(0,l.jsx)(n.code,{children:"Recursive CTE"})," in SQL."]}),"\n",(0,l.jsxs)(n.p,{children:["Jimmer provides unified support for ",(0,l.jsx)(n.code,{children:"Derived Table"}),", ",(0,l.jsx)(n.code,{children:"CTE"}),", and ",(0,l.jsx)(n.code,{children:"Recursive CTE"})," using strongly typed DSL."]}),"\n",(0,l.jsxs)(n.admonition,{type:"tip",children:[(0,l.jsxs)(n.p,{children:["Unlike these concepts in SQL, Jimmer additionally provides a completely new and revolutionary feature: ",(0,l.jsx)(n.strong,{children:"Reverse Projection Propagation"}),"."]}),(0,l.jsx)(n.p,{children:"This is a completely new design philosophy and is the focus of this article."})]}),"\n",(0,l.jsx)(n.h2,{id:"introduction-to-derived-table",children:"Introduction to Derived Table"}),"\n",(0,l.jsxs)(n.p,{children:["A Derived Table uses a query as the base table for the ",(0,l.jsx)(n.code,{children:"from"})," or ",(0,l.jsx)(n.code,{children:"join"})," clause of other queries. For example:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"select a, b, c \n--highlight-start\nfrom (\n    select a, b, c, d from t where ....\n) derived_table\n--highlight-end\nwhere d between 1 and 10\n"})}),"\n",(0,l.jsx)(n.p,{children:"Jimmer implements derived tables as follows:"}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'BookTable book = BookTable.$;\nAuthorTableEx author = AuthorTableEx.$;\nBaseTable2<BookTable, NumericExpression<Integer>> baseTable =\n    sqlClient\n        // highlight-next-line\n        .createBaseQuery(book)\n        .addSelect(book)\n        .addSelect(\n            Expression.numeric().sql(\n                Integer.class,\n                "dense_rank() over(" +\n                    "order by %e desc" +\n                    ")",\n                sqlClient.createSubQuery(author)\n                    .where(author.books().id().eq(book.id()))\n                    .selectCount()\n            )\n        )\n        // highlight-next-line\n        .asBaseTable();\nList<Book> books =\n    sqlClient\n        // highlight-next-line\n        .createQuery(baseTable)\n        .where(baseTable.get_2().eq(1))\n        .select(baseTable.get_1())\n        .execute();\n'})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'val baseTable = \n    // highlight-next-line\n    baseTableSymbol {\n        // highlight-next-line\n        sqlClient.createBaseQuery(Book::class) {\n            selections\n                .add(table)\n                .add(\n                    sql(Int::class, "dense_rank() over(order by %e desc)") {\n                        expression(\n                            subQuery(Author::class) {\n                                where(table.books.id eq parentTable.id)\n                                select(rowCount())\n                            }\n                        )\n                    }\n                )\n        }\n    }\nval books = \n    // highlight-next-line\n    sqlClient.createQuery(baseTable) {\n        where(table._2 eq 1)\n        select(table._1)\n    }.execute()\n'})})})]}),"\n",(0,l.jsx)(n.p,{children:"For this example:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Unlike queries created by ",(0,l.jsx)(n.code,{children:"createQuery"}),", base queries created by ",(0,l.jsx)(n.code,{children:"createBaseQuery"})," are not executed directly. Their purpose is only to build derived tables for subsequent use by real queries created with ",(0,l.jsx)(n.code,{children:"createQuery"})," ",(0,l.jsxs)(n.em,{children:["(as base tables for ",(0,l.jsx)(n.code,{children:"from"})," or ",(0,l.jsx)(n.code,{children:"join"}),")"]}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["The internal base-query returns two columns ",(0,l.jsx)(n.em,{children:"(the first column is a table object, the second column is a simple expression)"}),". The external query uses ",(0,l.jsx)(n.code,{children:"get_1()"}),"/",(0,l.jsx)(n.code,{children:"_1"})," and ",(0,l.jsx)(n.code,{children:"get_2()"}),"/",(0,l.jsx)(n.code,{children:"_2"})," to use them."]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Base-queries support returning 1-9 columns"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Unlike ",(0,l.jsx)(n.code,{children:"createQuery"})," and ",(0,l.jsx)(n.code,{children:"createSubQuery"})," ",(0,l.jsx)(n.em,{children:"(which haven't been introduced yet but will appear in later chapters)"}),", ",(0,l.jsx)(n.code,{children:"createBaseQuery"})," does not use the ",(0,l.jsx)(n.code,{children:"select(selection1, selection2, ..., selectionN)"})," method to specify projections, but instead:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Java uses ",(0,l.jsx)(n.code,{children:".addSelect(...).addSelect(...)...addSelect(...)"})," style code to specify projections"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Kotlin uses ",(0,l.jsx)(n.code,{children:"selections.add(...).add(...)...add(...)"})," style code to specify projections"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.admonition,{type:"info",children:(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Chain programming style must be adopted, and syntax cannot be interrupted at the language level to ensure successful compilation"}),"\n",(0,l.jsxs)(n.li,{children:["Base-query uses special projection specification methods to implement the important feature that will be introduced later: ",(0,l.jsx)(n.strong,{children:"Reverse Projection Propagation"}),". Please ignore the intention of this design for now."]}),"\n"]})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"This query generates the following SQL:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.c1,\n    tb_1_.c2,\n    tb_1_.c3,\n    tb_1_.c4,\n    tb_1_.c5 \n--highlight-next-line\nfrom (\n    select\n        tb_2_.ID c1,\n        tb_2_.NAME c2,\n        tb_2_.EDITION c3,\n        tb_2_.PRICE c4,\n        tb_2_.STORE_ID c5,\n        dense_rank() over(order by (\n            select\n                count(1)\n            from AUTHOR tb_3_\n            inner join BOOK_AUTHOR_MAPPING tb_4_\n                on tb_3_.ID = tb_4_.AUTHOR_ID\n            where\n                tb_4_.BOOK_ID = tb_2_.ID\n        ) desc) c6\n    from BOOK tb_2_\n) tb_1_\nwhere\n    tb_1_.c6 = ? /* 1 */\n"})}),"\n",(0,l.jsx)(n.p,{children:"The result is:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "id": 1,\n        "name": "Learning GraphQL",\n        "edition": 1,\n        "price": 50,\n        "store": {\n            "id": 1\n        }\n    },\n    {\n        "id": 2,\n        "name": "Learning GraphQL",\n        "edition": 2,\n        "price": 55,\n        "store": {\n            "id": 1\n        }\n    },\n    {\n        "id": 3,\n        "name": "Learning GraphQL",\n        "edition": 3,\n        "price": 51,\n        "store": {\n            "id": 1\n        }\n    }\n]\n'})}),"\n",(0,l.jsx)(n.h2,{id:"reverse-projection-propagation",children:"Reverse Projection Propagation"}),"\n",(0,l.jsx)(n.h3,{id:"unique-projection-column-settings-for-basequery",children:"Unique Projection Column Settings for BaseQuery"}),"\n",(0,l.jsx)(n.p,{children:"As mentioned above:"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["Unlike ",(0,l.jsx)(n.code,{children:"createQuery"})," and ",(0,l.jsx)(n.code,{children:"createSubQuery"})," ",(0,l.jsx)(n.em,{children:"(which haven't been introduced yet but will appear in later chapters)"}),", ",(0,l.jsx)(n.code,{children:"createBaseQuery"})," does not use the ",(0,l.jsx)(n.code,{children:"select(selection1, selection2, ..., selectionN)"})," method to specify projections, but instead:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Java uses ",(0,l.jsx)(n.code,{children:".addSelect(...).addSelect(...)...addSelect(...)"})," style code to specify projections"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Kotlin uses ",(0,l.jsx)(n.code,{children:"selections.add(...).add(...)...add(...)"})," style code to specify projections"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.admonition,{type:"caution",children:(0,l.jsx)(n.p,{children:"Chain programming style must be adopted, and syntax cannot be interrupted at the language level to ensure successful compilation."})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"createBaseQuery"})," is designed this way to allow only the following two operations:"]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Query simple expressions"}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'.addSelect(\n    Expression.concat(\n        table.firstName(), \n        Expression.constant(" "), \n        table.lastName()\n    )\n)\n'})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'selections.add(\n    concat(\n        table.firstName,\n        constant(" "),\n        table.lastName\n    )\n)\n'})})})]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Query table objects"}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:".addSelect(table)\n.addSelect(table.store())\n.addSelect(table.asTableEx().authors())\n"})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"selections\n    .add(table)\n    .add(table.store)\n    .add(table.asTableEx().authors)\n"})})})]}),"\n",(0,l.jsxs)(n.admonition,{type:"info",children:[(0,l.jsx)(n.p,{children:"That is:"}),(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Either return simple expressions"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Or return objects ",(0,l.jsx)(n.em,{children:"(unkown shape)"})]}),"\n"]}),"\n"]}),(0,l.jsxs)(n.p,{children:["Among these, returning table objects with unknown shapes ",(0,l.jsx)(n.em,{children:"(2)"})," is what reverse projection propagation is concerned with and is the focus of this chapter."]}),(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["Note: You cannot apply ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetchers"})," to returned table objects, or return ",(0,l.jsx)(n.a,{href:"./object-fetcher/dto",children:"Output DTOs"}),"."]}),"\n"]})]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The following approaches are not allowed:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)("span",{style:{textDecoration:"line-through"},children:["Object queries using ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetchers"})," is prohibited"]}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"// Note: This shows illegal code\n.addSelect(\n    table.fetch(\n        BookFetcher.$\n            .allScalarFields()\n            .store(\n                BookStoreFetcher.$.name()\n            )\n            .authors(\n                AuthorFetcher.$.name()\n            )\n    )\n)\n"})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"// Note: This shows illegal code\nselections.add(\n    table.fetchBy {\n        allScalarFields()\n        store {\n            name()\n        }\n        authors {\n            authors()\n        }\n    }\n)\n"})})})]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)("span",{style:{textDecoration:"line-through"},children:["Returning ",(0,l.jsx)(n.a,{href:"./object-fetcher/dto",children:"Output DTOs"})," is prohibited"]}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"// Note: This shows illegal code\n.addSelect(table.fetch(BookView.class))\n"})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"// Note: This shows illegal code\nselections.add(table.fetch(BookView::class))\n"})})})]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.admonition,{type:"info",children:[(0,l.jsxs)(n.p,{children:["Object queries based on ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetchers"}),"/",(0,l.jsx)(n.a,{href:"./object-fetcher/dto",children:"Output DTOs"})," are one of Jimmer's core features, but BaseQuery projection query APIs do not allow such queries."]}),(0,l.jsxs)(n.p,{children:["This is not to prohibit using this capability; ",(0,l.jsx)(n.strong,{children:"quite the opposite"}),", this is to provide better abstraction and better use of ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetchers"})," and ",(0,l.jsx)(n.a,{href:"./object-fetcher/dto",children:"Output DTOs"}),"."]})]}),"\n",(0,l.jsx)(n.h3,{id:"introduction-to-reverse-projection-propagation-mechanism",children:"Introduction to Reverse Projection Propagation Mechanism"}),"\n",(0,l.jsx)(n.p,{children:"In native SQL, queries based on derived tables are often like this:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"select \n    --highlight-start\n    c1, \n    c2,\n    c3,\n    ...,\n    cM\n    --highlight-end\nfrom (\n    select \n        --highlight-start\n        c1,\n        c2,\n        c3,\n        ...,\n        cM,\n        ...,\n        CN\n        --highlight-end\n    from real_table\n) derived_table\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Where M <= N"}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["We first decide the return column set ",(0,l.jsx)(n.code,{children:"(c1, c2, ..., cN)"})," for the internal base query, then select a subset ",(0,l.jsx)(n.code,{children:"(c1, c2, ..., cM)"})," ",(0,l.jsx)(n.em,{children:"(M <= N)"})," for the external real query to return."]}),"\n",(0,l.jsx)(n.p,{children:"Obviously, this is an inside-out projection propagation process. The projections of inner and outer queries contain many duplicate columns, which is very tedious and error-prone. When there are many columns, this is extremely unfavorable for development, refactoring, and maintenance. Unfortunately, real projects are almost always like this."}),"\n",(0,l.jsxs)(n.admonition,{type:"tip",children:[(0,l.jsxs)(n.p,{children:["Therefore, Jimmer adopts an ",(0,l.jsx)(n.strong,{children:"outside-in"})," reverse projection propagation mechanism:"]}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["If the internal base-query returns objects, it must return original table objects and cannot use ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetchers"})," or ",(0,l.jsx)(n.a,{href:"./object-fetcher/dto",children:"Output DTOs"}),", indicating that the shape of the returned objects is unknown."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Finally, which specific columns the internal base-query should return is automatically determined based on the needs of the external query, without the need to explicitly specify them in the internal base-query."}),"\n",(0,l.jsx)(n.p,{children:"Methods for external queries to control which specific columns the internal base-query should return include:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetchers"})}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"./object-fetcher/dto",children:"Output DTO"})," types"]}),"\n",(0,l.jsx)(n.li,{children:"Column properties used in DSL"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Reverse projection propagation not only greatly simplifies complexity but also brings intelligent and practical features that native SQL does not have."}),"\n"]}),"\n"]})]}),"\n",(0,l.jsxs)(n.p,{children:["Now, using ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetchers"})," as an example, let's write a function:"]}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'private List<Book> findBooks(\n    // highlight-next-line\n    Fetcher<Book> fetcher\n) {\n    BookTable table = BookTable.$;\n    AuthorTableEx author = AuthorTableEx.$;\n    BaseTable2<BookTable, NumericExpression<Integer>> baseTable =\n        sqlClient\n            .createBaseQuery(table)\n            .addSelect(table)\n            .addSelect(\n                Expression.numeric().sql(\n                    Integer.class,\n                    "dense_rank() over(" +\n                        "order by %e desc" +\n                        ")",\n                    sqlClient.createSubQuery(author)\n                        .where(author.books().id().eq(table.id()))\n                        .selectCount()\n                )\n            )\n            .asBaseTable();\n    return sqlClient\n        .createQuery(baseTable)\n        .where(baseTable.get_2().eq(1))\n        .select(\n            baseTable.get_1().fetch(\n                // highlight-next-line\n                fetcher\n            )\n        )\n        .execute();\n}\n'})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'private fun findBooks(\n    // highlight-next-line\n    fetcher: Fetcher<Book>\n): List<Book> {\n    val baseTable = baseTableSymbol {\n        sqlClient.createBaseQuery(Book::class) {\n            selections\n                .add(table)\n                .add(\n                    sql(Int::class, "dense_rank() over(order by %e desc)") {\n                        expression(\n                            subQuery(Author::class) {\n                                where(table.books.id eq parentTable.id)\n                                select(rowCount())\n                            }\n                        )\n                    }\n                )\n        }\n    }\n    return sqlClient.createQuery(baseTable) {\n        where(table._2 eq 1)\n        select(\n            table._1.fetch(\n                // highlight-next-line\n                fetcher\n            )\n        )\n    }.execute()\n}\n'})})})]}),"\n",(0,l.jsx)(n.p,{children:"Now let's look at 3 cases:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Simple ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetcher"})]}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"List<Book> books = findBooks(\n    BookFetcher.$\n        // highlight-next-line\n        .name()\n);\n"})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"val books = findBooks(\n    newFetcher(Book::class).by {\n        // highlight-next-line\n        name()\n    }\n)\n"})})})]}),"\n",(0,l.jsxs)(n.p,{children:["Since the ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetcher"})," is simple, both inner and outer queries return fewer columns, generating the following SQL:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.c1,\n    --highlight-next-line\n    tb_1_.c2 \nfrom (\n    select\n        tb_2_.ID c1,\n        --highlight-next-line\n        tb_2_.NAME c2,\n        dense_rank() over(order by (\n            select\n                count(1)\n            from AUTHOR tb_3_\n            inner join BOOK_AUTHOR_MAPPING tb_4_\n                on tb_3_.ID = tb_4_.AUTHOR_ID\n            where\n                tb_4_.BOOK_ID = tb_2_.ID\n        ) desc) c3\n    from BOOK tb_2_\n) tb_1_\nwhere\n    tb_1_.c3 = ? /* 1 */\n"})}),"\n",(0,l.jsx)(n.p,{children:"The query returns the following data:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "id": 1,\n        // highlight-next-line\n        "name": "Learning GraphQL"\n    },\n    {\n        "id": 2,\n        // highlight-next-line\n        "name": "Learning GraphQL"\n    },\n    {\n        "id": 3,\n        // highlight-next-line\n        "name": "Learning GraphQL"\n    }\n]\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Moderately complex ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetcher"})]}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"List<Book> books = findBooks(\n    BookFetcher.$\n        // highlight-next-line\n        .allScalarFields()\n);\n"})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"val books = findBooks(\n    newFetcher(Book::class).by {\n        // highlight-next-line\n        allScalarFields()\n    }\n)\n"})})})]}),"\n",(0,l.jsxs)(n.p,{children:["Since the ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetcher"})," is relatively complex, both inner and outer queries return more columns, generating the following SQL:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.c1,\n    --highlight-start\n    tb_1_.c2,\n    tb_1_.c3,\n    tb_1_.c4 \n    --highlight-end\nfrom (\n    select\n        tb_2_.ID c1,\n        --highlight-start\n        tb_2_.NAME c2,\n        tb_2_.EDITION c3,\n        tb_2_.PRICE c4,\n        --highlight-end\n        dense_rank() over(order by (\n            select\n                count(1)\n            from AUTHOR tb_3_\n            inner join BOOK_AUTHOR_MAPPING tb_4_\n                on tb_3_.ID = tb_4_.AUTHOR_ID\n            where\n                tb_4_.BOOK_ID = tb_2_.ID\n        ) desc) c5\n    from BOOK tb_2_\n) tb_1_\nwhere\n    tb_1_.c5 = ? /* 1 */\n"})}),"\n",(0,l.jsx)(n.p,{children:"The query returns the following data:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "id": 1,\n        // highlight-start\n        "name": "Learning GraphQL",\n        "edition": 1,\n        "price": 50\n        // highlight-end\n    },\n    {\n        "id": 2,\n        // highlight-start\n        "name": "Learning GraphQL",\n        "edition": 2,\n        "price": 55\n        // highlight-end\n    },\n    {\n        "id": 3,\n        // highlight-start\n        "name": "Learning GraphQL",\n        "edition": 3,\n        "price": 51\n        // highlight-end\n    }\n]\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Complex ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetcher"})]}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"List<Book> books = findBooks(\n    BookFetcher.$\n        .name()\n        // highlight-next-line\n        .store(\n            ReferenceFetchType.JOIN_ALWAYS,\n            BookStoreFetcher.$.name()\n        )\n);\n"})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"val books = findBooks(\n    newFetcher(Book::class).by {\n        name()\n        // highlight-next-line\n        store(ReferenceFetchType.JOIN_ALWAYS) {\n            name()\n        }\n    }\n)\n"})})})]}),"\n",(0,l.jsxs)(n.p,{children:["Since the ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetcher"})," includes join fetch operations, the query naturally also fetches associated objects through joins, generating the following SQL:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.c1,\n    tb_1_.c2,\n    -- highlight-start\n    tb_6_.ID,\n    tb_6_.NAME \n    -- highlight-end\nfrom (\n    select\n        tb_2_.ID c1,\n        tb_2_.NAME c2,\n        tb_2_.STORE_ID c3,\n        dense_rank() over(order by (\n            select\n                count(1)\n            from AUTHOR tb_3_\n            inner join BOOK_AUTHOR_MAPPING tb_4_\n                on tb_3_.ID = tb_4_.AUTHOR_ID\n            where\n                tb_4_.BOOK_ID = tb_2_.ID\n        ) desc) c4\n    from BOOK tb_2_\n) tb_1_\n-- highlight-start\nleft join BOOK_STORE tb_6_\n    on tb_1_.c3 = tb_6_.ID\n-- highlight-end\nwhere\n    tb_1_.c4 >= ? /* 1 */\n"})}),"\n",(0,l.jsx)(n.p,{children:"The query returns the following data:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "id": 1,\n        "name": "Learning GraphQL",\n        // highlight-start\n        "store": {\n            "id": 1,\n            "name": "O\'REILLY"\n        }\n        // highlight-end\n    },\n    {\n        "id": 2,\n        "name": "Learning GraphQL",\n        // highlight-start\n        "store": {\n            "id": 1,\n            "name": "O\'REILLY"\n        }\n        // highlight-end\n    },\n    {\n        "id": 3,\n        "name": "Learning GraphQL",\n        // highlight-start\n        "store": {\n            "id": 1,\n            "name": "O\'REILLY"\n        }\n        // highlight-end\n    }\n]\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsxs)(n.p,{children:["As you can see, reverse projection propagation means that the internal base-query does not directly control the format of returned table objects ",(0,l.jsx)(n.em,{children:"(returning original table objects and treating them as having unknown shapes)"}),". The format of returned objects is uniformly controlled by external queries, and the internal base-query automatically determines which columns to return based on the needs of external queries."]})}),"\n",(0,l.jsx)(n.h3,{id:"projection-propagation-for-set-operations",children:"Projection Propagation for Set Operations"}),"\n",(0,l.jsxs)(n.p,{children:["SQL supports set operations like ",(0,l.jsx)(n.code,{children:"UNION"}),", ",(0,l.jsx)(n.code,{children:"UNION ALL"}),", ",(0,l.jsx)(n.code,{children:"INTERSECT"}),", and ",(0,l.jsx)(n.code,{children:"MINUS"}),". Base-queries work the same way. Let's modify ",(0,l.jsx)(n.code,{children:"findBooks"})," as follows:"]}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'private List<Book> findBooks(\n    Fetcher<Book> fetcher\n) {\n    BookTable table = BookTable.$;\n    AuthorTableEx author = AuthorTableEx.$;\n    BaseTable2<BookTable, NumericExpression<Integer>> baseTable =\n        // highlight-next-line\n        TypedBaseQuery.unionAll(\n            sqlClient\n                .createBaseQuery(table)\n                // highlight-next-line\n                .where(table.edition().eq(2))\n                .addSelect(table)\n                .addSelect(\n                    Expression.numeric().sql(\n                        Integer.class,\n                        "dense_rank() over(" +\n                            "order by %e desc" +\n                            ")",\n                        sqlClient.createSubQuery(author)\n                            .where(author.books().id().eq(table.id()))\n                            .selectCount()\n                    )\n                ),\n            sqlClient\n                .createBaseQuery(table)\n                // highlight-next-line\n                .where(table.edition().eq(3))\n                .addSelect(table)\n                .addSelect(\n                    Expression.numeric().sql(\n                        Integer.class,\n                        "dense_rank() over(" +\n                            "order by %e desc" +\n                            ")",\n                        sqlClient.createSubQuery(author)\n                            .where(author.books().id().eq(table.id()))\n                            .selectCount()\n                    )\n                )\n        ).asBaseTable();\n    return sqlClient\n        .createQuery(baseTable)\n        .where(baseTable.get_2().eq(1))\n        .select(baseTable.get_1().fetch(fetcher))\n        .execute();\n}\n'})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'private fun findBooks(\n    fetcher: Fetcher<Book>\n): List<Book> {\n    val baseTable = baseTableSymbol {\n        sqlClient.createBaseQuery(Book::class) {\n            // highlight-next-line\n            where(table.edition eq 2)\n            selections\n                .add(table)\n                .add(\n                    sql(Int::class, "dense_rank() over(order by %e desc)") {\n                        expression(\n                            subQuery(Author::class) {\n                                where(table.books.id eq parentTable.id)\n                                select(rowCount())\n                            }\n                        )\n                    }\n                )\n            // highlight-next-line\n        } unionAll\n        sqlClient.createBaseQuery(Book::class) {\n            // highlight-next-line\n            where(table.edition eq 3)\n            selections\n                .add(table)\n                .add(\n                    sql(Int::class, "dense_rank() over(order by %e desc)") {\n                        expression(\n                            subQuery(Author::class) {\n                                where(table.books.id eq parentTable.id)\n                                select(rowCount())\n                            }\n                        )\n                    }\n                )\n        }\n    }\n    return sqlClient.createQuery(baseTable) {\n        where(table._2 eq 1)\n        select(\n            table._1.fetch(fetcher)\n        )\n    }.execute()\n}\n'})})})]}),"\n",(0,l.jsx)(n.p,{children:"Now let's look at two cases:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Simple ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetcher"})]}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"List<Book> books = findBooks(\n    BookFetcher.$\n        // highlight-next-line\n        .name()\n);\n"})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"val books = findBooks(\n    newFetcher(Book::class).by {\n        // highlight-next-line\n        name()\n    }\n)\n"})})})]}),"\n",(0,l.jsxs)(n.p,{children:["Since the ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetcher"})," is simple, both inner and outer queries return fewer columns, generating the following SQL:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.c1,\n    --highlight-next-line\n    tb_1_.c2 \nfrom (\n        select\n            tb_2_.ID c1,\n            --highlight-next-line\n            tb_2_.NAME c2,\n            dense_rank() over(order by (\n                select\n                    count(1)\n                from AUTHOR tb_3_\n                inner join BOOK_AUTHOR_MAPPING tb_4_\n                    on tb_3_.ID = tb_4_.AUTHOR_ID\n                where\n                    tb_4_.BOOK_ID = tb_2_.ID\n            ) desc) c3\n        from BOOK tb_2_\n        where\n            tb_2_.EDITION = ? /* 2 */\n        union all\n        select\n            tb_6_.ID c1,\n            --highlight-next-line\n            tb_6_.NAME c2,\n            dense_rank() over(order by (\n                select\n                    count(1)\n                from AUTHOR tb_7_\n                inner join BOOK_AUTHOR_MAPPING tb_8_\n                    on tb_7_.ID = tb_8_.AUTHOR_ID\n                where\n                    tb_8_.BOOK_ID = tb_6_.ID\n            ) desc) c3\n        from BOOK tb_6_\n        where\n            tb_6_.EDITION = ? /* 3 */\n) tb_1_\nwhere\n    tb_1_.c3 = ? /* 1 */\n"})}),"\n",(0,l.jsx)(n.p,{children:"The query returns the following data:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "id": 2,\n        // highlight-next-line\n        "name": "Learning GraphQL"\n    },\n    {\n        "id": 3,\n        // highlight-next-line\n        "name": "Learning GraphQL"\n    }\n]\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Relatively complex ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetcher"})]}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"List<Book> books = findBooks(\n    BookFetcher.$\n        // highlight-next-line\n        .allScalarFields()\n);\n"})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"val books = findBooks(\n    newFetcher(Book::class).by {\n        // highlight-next-line\n        allScalarFields()\n    }\n)\n"})})})]}),"\n",(0,l.jsxs)(n.p,{children:["Since the ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetcher"})," is relatively complex, both inner and outer queries return more columns, generating the following SQL:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.c1,\n    --highlight-start\n    tb_1_.c2,\n    tb_1_.c3,\n    tb_1_.c4 \n    --highlight-end\nfrom (\n        select\n            tb_2_.ID c1,\n            --highlight-start\n            tb_2_.NAME c2,\n            tb_2_.EDITION c3,\n            tb_2_.PRICE c4,\n            --highlight-end\n            dense_rank() over(order by (\n                select\n                    count(1)\n                from AUTHOR tb_3_\n                inner join BOOK_AUTHOR_MAPPING tb_4_\n                    on tb_3_.ID = tb_4_.AUTHOR_ID\n                where\n                    tb_4_.BOOK_ID = tb_2_.ID\n            ) desc) c5\n        from BOOK tb_2_\n        where\n            tb_2_.EDITION = ? /* 2 */\n        union all\n        select\n            tb_6_.ID c1,\n            --highlight-start\n            tb_6_.NAME c2,\n            tb_6_.EDITION c3,\n            tb_6_.PRICE c4,\n            --highlight-end\n            dense_rank() over(order by (\n                select\n                    count(1)\n                from AUTHOR tb_7_\n                inner join BOOK_AUTHOR_MAPPING tb_8_\n                    on tb_7_.ID = tb_8_.AUTHOR_ID\n                where\n                    tb_8_.BOOK_ID = tb_6_.ID\n            ) desc) c5\n        from BOOK tb_6_\n        where\n            tb_6_.EDITION = ? /* 3 */\n) tb_1_\nwhere\n    tb_1_.c5 = ? /* 1 */\n"})}),"\n",(0,l.jsx)(n.p,{children:"The query returns the following data:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "id": 2,\n        // highlight-start\n        "name": "Learning GraphQL",\n        "edition": 2,\n        "price": 55\n        // highlight-end\n    },\n    {\n        "id": 3,\n        // highlight-start\n        "name": "Learning GraphQL",\n        "edition": 3,\n        "price": 51\n        // highlight-end\n    }\n]\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsxs)(n.p,{children:["In the reverse projection propagation process from outside to inside, if the base-query itself uses set operations ",(0,l.jsxs)(n.em,{children:["(",(0,l.jsx)(n.code,{children:"UNION"}),", ",(0,l.jsx)(n.code,{children:"UNION ALL"}),", ",(0,l.jsx)(n.code,{children:"INTERSECT"}),", or ",(0,l.jsx)(n.code,{children:"MINUS"}),")"]}),", this propagation process will split and affect each smaller base-query participating in the set operation."]})}),"\n",(0,l.jsx)(n.h3,{id:"projection-column-merging",children:"Projection Column Merging"}),"\n",(0,l.jsxs)(n.p,{children:["In fact, ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetcher"})," and ",(0,l.jsx)(n.a,{href:"./object-fetcher/dto",children:"Output DTO"})," are not the only reasons causing projection reverse propagation."]}),"\n",(0,l.jsx)(n.p,{children:"If a base-query returns a table object with unknown shape, and the outer query uses SQL DSL depending on some properties of that table object, it can also cause the projection reverse propagation mechanism."}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"private List<Book> findBooks(\n    @Nullable String name, \n    Fetcher<Book> fetcher\n) {\n    BookTable table = BookTable.$;\n    BaseTable1<BookTable> baseTable =\n        sqlClient\n            .createBaseQuery(table)\n            .where(table.edition().eq(3))\n            .addSelect(table)\n            .asBaseTable();\n    return sqlClient\n        .createQuery(baseTable)\n        .where(\n            // highlight-next-line\n            baseTable.get_1().name().eqIf(name)\n        )\n        .select(baseTable.get_1().fetch(fetcher))\n        .execute();\n}\n"})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"private fun findBooks(\n    name: String?, \n    fetcher: Fetcher<Book>\n): List<Book> {\n    val baseTable = baseTableSymbol {\n        sqlClient.createBaseQuery(Book::class) {\n            where(table.edition eq 3)\n            selections.add(table)\n        }\n    }\n    return sqlClient.createQuery(baseTable) {\n        where(\n            // highlight-next-line\n            table._1.name `eq?` name\n        )\n        select(table._1.fetch(fetcher))\n    }.execute()\n}\n"})})})]}),"\n",(0,l.jsx)(n.p,{children:"Let me observe two cases:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Does not trigger projection reverse propagation"}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"List<Book> books = findBooks(\n    null,\n    BookFetcher.$,\n)\n"})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"val books = findBooks(\n    null, \n    newFetcher(Book::class).by {  }\n)\n"})})})]}),"\n",(0,l.jsx)(n.p,{children:"Here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["The name parameter is null, dynamic predicates ",(0,l.jsxs)(n.em,{children:["(Java's ",(0,l.jsx)(n.code,{children:"eqIf"})," and Kotlin's ",(0,l.jsx)(n.code,{children:"eq?"}),")"]})," cause the outer query's where clause to be ignored"]}),"\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetcher"})," parameter is too simple, only requiring ",(0,l.jsx)(n.code,{children:"id-only"})," objects"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Therefore, no projection requirements for non-id fields are reverse propagated to the base-query, and the final generated SQL statement is very simple"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.c1 \nfrom (\n    select\n        tb_2_.ID c1\n    from BOOK tb_2_\n    where\n        tb_2_.EDITION = ? /* 3 */\n) tb_1_\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["The outer query adds a where condition triggering projection reverse propagation ",(0,l.jsxs)(n.em,{children:["(but not through ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetcher"}),")"]}),", causing the base-query to return the name column"]}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'List<Book> books = findBooks(\n    // highlight-next-line\n    "GraphQL in Action",\n    BookFetcher.$,\n)\n'})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'val books = findBooks(\n    // highlight-next-line\n    "GraphQL in Action", \n    newFetcher(Book::class).by {  }\n)\n'})})})]}),"\n",(0,l.jsx)(n.p,{children:"The generated SQL is as follows:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.c1 from (\n    select\n        tb_2_.ID c1,\n        -- highlight-next-line\n        tb_2_.NAME c2\n    from BOOK tb_2_\n    where\n        tb_2_.EDITION = ? /* 3 */\n) tb_1_\nwhere\n    -- highlight-next-line\n    tb_1_.c2 = ? /* GraphQL in Action */\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"The outer query:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Triggers projection reverse propagation through where conditions, requiring the internal base-query to return the name column"}),"\n",(0,l.jsxs)(n.li,{children:["Also triggers projection reverse propagation through ",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetcher"}),", requiring the internal base-query to return the name column"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["The base-query will automatically ",(0,l.jsx)(n.strong,{children:"merge"})," both requirements, querying the name column only once"]}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'List<Book> books = findBooks(\n    // highlight-next-line\n    "GraphQL in Action",\n    // highlight-next-line\n    BookFetcher.$.name(),\n)\n'})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'val books = findBooks(\n    // highlight-next-line\n    "GraphQL in Action", \n    newFetcher(Book::class).by { \n        // highlight-next-line\n        name()\n     }\n)\n'})})})]}),"\n",(0,l.jsx)(n.p,{children:"The generated SQL is as follows:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.c1,\n    -- highlight-next-line\n    tb_1_.c2 // 1. Outer query fetches name\nfrom (\n    select\n        tb_2_.ID c1,\n        -- highlight-next-line\n        tb_2_.NAME c2 // Finally, base-query only queries name once\n    from BOOK tb_2_\n    where\n        tb_2_.EDITION = ? /* 3 */\n) tb_1_\nwhere\n    -- highlight-next-line\n    tb_1_.c2 = ? // 2. Outer query uses where condition to check name\n"})}),"\n",(0,l.jsxs)(n.p,{children:["As can be seen, the outer query triggers projection reverse propagation through two different methods ",(0,l.jsxs)(n.em,{children:["(",(0,l.jsx)(n.a,{href:"./object-fetcher/",children:"Object Fetcher"})," and where conditions)"]})," ",(0,l.jsx)(n.em,{children:"(requiring the internal base-query to return the name column)"}),",\nbut the internal query only queries the name column once."]}),"\n",(0,l.jsx)(n.p,{children:"That is, projection requirements for the same columns from different projection reverse propagation demands in the outer query will be automatically merged."}),"\n",(0,l.jsxs)(n.admonition,{type:"tip",children:[(0,l.jsx)(n.p,{children:"Since projection reverse propagation automatically merges requests for the same columns, using base-query to return expression columns only becomes meaningful when expressions are very complex."}),(0,l.jsx)(n.p,{children:"Therefore, it is not recommended for the internal base-query to return simple column property expressions alone. In most cases, the internal base-query can directly return the original table object."})]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"weak-join",children:"Weak Join"}),"\n",(0,l.jsx)(n.p,{children:"Here, we:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Call the table corresponding to the original entity type as Entity Table"}),"\n",(0,l.jsx)(n.li,{children:"Call the temporary table built by base-query as Derived Table"}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["So, whether entity tables or derived tables, both can perform ",(0,l.jsx)(n.code,{children:"weakJoin"})," operations on derived tables."]}),"\n",(0,l.jsxs)(n.admonition,{type:"info",children:[(0,l.jsx)(n.p,{children:"Jimmer table joins have two important characteristics:"}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Unnecessary table joins will be automatically ignored, see ",(0,l.jsx)(n.a,{href:"./dynamic-join/optimization",children:"Optimizing Unnecessary Joins"})]}),"\n",(0,l.jsxs)(n.li,{children:["Conflicting table joins will be automatically merged, see ",(0,l.jsx)(n.a,{href:"./dynamic-join/merge",children:"Merging Conflicting Joins"})]}),"\n"]}),(0,l.jsx)(n.p,{children:"Since these contents have been discussed in detail in related chapters, this article will not repeat them, but only list the writing methods for JOIN operations related to derived tables."})]}),"\n",(0,l.jsx)(n.h3,{id:"derived-table-join-derived-table",children:"Derived Table JOIN Derived Table"}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'BookTable rawBook = BookTable.$;\nBaseTable2<BookTable, NumericExpression<Integer>> baseBook =\n    sqlClient\n        .createBaseQuery(rawBook)\n        .addSelect(rawBook)\n        .addSelect(\n            Expression.numeric().sql(\n                Integer.class,\n                "row_number() over(order by %e desc)",\n                rawBook.price()\n            )\n        )\n        .asBaseTable();\nAuthorTable rawAuthor = AuthorTable.$;\nBaseTable2<AuthorTable, NumericExpression<Integer>> baseAuthor =\n    sqlClient\n        .createBaseQuery(rawAuthor)\n        .addSelect(rawAuthor)\n        .addSelect(\n            Expression.numeric().sql(\n                Integer.class,\n                "row_number() over(order by %e asc)",\n                rawAuthor.firstName().length()\n                    .plus(rawAuthor.lastName().length())\n            )\n        )\n        .asBaseTable();\nBaseTable2<AuthorTable, NumericExpression<Integer>> joinedBaseAuthor =\n    // highlight-next-line\n    baseBook.weakJoin(\n        baseAuthor,\n        (bb, ba) ->\n            bb.get_1().id().eq(ba.get_1().asTableEx().books().id())\n    );\nList<Tuple2<Book, Author>> tuples = sqlClient\n    .createQuery(baseBook)\n    .where(baseBook.get_2().lt(4))\n    .where(joinedBaseAuthor.get_2().lt(4))\n    .select(\n        baseBook.get_1(),\n        joinedBaseAuthor.get_1()\n    )\n    .execute();\n'})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'val baseBook = baseTableSymbol {\n    sqlClient.createBaseQuery(Book::class) {\n        selections\n            .add(table)\n            .add(\n                sql(Int::class, "row_number() over(order by %e desc)") {\n                    expression(table.price)\n                }\n            )\n    }\n}\nval baseAuthor = baseTableSymbol {\n    sqlClient.createBaseQuery(Author::class) {\n        selections\n            .add(table)\n            .add(\n                sql(Int::class, "row_number() over(order by %e asc)") {\n                    expression(\n                        table.firstName.length() +\n                            table.lastName.length()\n                    )\n                }\n            )\n    }\n}\nval tuples = sqlClient.createQuery(baseBook) {\n    // highlight-next-line\n    val joinedAuthor = table.weakJoin(baseAuthor) {\n        source._1.id eq target._1.asTableEx().books.id\n    }\n    where += table._2 lt 4\n    where += joinedAuthor._2 lt 4\n    select(\n        table._1,\n        joinedAuthor._1\n    )\n}.execute()\n'})})})]}),"\n",(0,l.jsx)(n.p,{children:"Generates the following SQL:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.c1,\n    tb_1_.c2,\n    tb_1_.c3,\n    tb_1_.c4,\n    tb_1_.c5,\n    tb_2_.c6,\n    tb_2_.c7,\n    tb_2_.c8,\n    tb_2_.c9 from (\n    select\n        tb_3_.ID c1,\n        tb_3_.NAME c2,\n        tb_3_.EDITION c3,\n        tb_3_.PRICE c4,\n        tb_3_.STORE_ID c5,\n        row_number() over(order by tb_3_.PRICE desc) c10\n    from BOOK tb_3_\n) tb_1_\n-- highlight-next-line\ninner join (\n    select\n        tb_4_.ID c6,\n        tb_4_.FIRST_NAME c7,\n        tb_4_.LAST_NAME c8,\n        tb_4_.GENDER c9,\n        row_number() over(order by (\n            length(tb_4_.FIRST_NAME) + \n            length(tb_4_.LAST_NAME)\n        ) asc) c11\n    from AUTHOR tb_4_\n) tb_2_\ninner join BOOK_AUTHOR_MAPPING tb_5_\n    on tb_2_.c6 = tb_5_.AUTHOR_ID\n    on tb_1_.c1 = tb_5_.BOOK_ID\nwhere\n        tb_1_.c10 < ? /* 4 */\n    and\n        tb_2_.c11 < ? /* 4 */\n"})}),"\n",(0,l.jsx)(n.h3,{id:"entity-table-join-derived-table",children:"Entity Table JOIN Derived Table"}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'BookTable book = BookTable.$;\nAuthorTable rawAuthor = AuthorTable.$;\nBaseTable2<AuthorTable, NumericExpression<Integer>> baseAuthor =\n    sqlClient\n        .createBaseQuery(rawAuthor)\n        .addSelect(rawAuthor)\n        .addSelect(\n            Expression.numeric().sql(\n                Integer.class,\n                "row_number() over(order by %e asc)",\n                rawAuthor.firstName().length().plus(rawAuthor.lastName().length())\n            )\n        )\n        .asBaseTable();\nBaseTable2<AuthorTable, NumericExpression<Integer>> joinedBaseAuthor =\n    // highlight-next-line\n    book.asTableEx().weakJoin(\n        baseAuthor,\n        (b, ba) ->\n            b.id().eq(ba.get_1().asTableEx().books().id())\n    );\nList<Tuple2<Book, Author>> tuples = sqlClient\n    .createQuery(book)\n    .where(joinedBaseAuthor.get_2().lt(4))\n    .select(\n        book,\n        joinedBaseAuthor.get_1()\n    )\n    .execute();\n'})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'val baseAuthor = baseTableSymbol {\n    sqlClient.createBaseQuery(Author::class) {\n        selections\n            .add(table)\n            .add(\n                sql(Int::class, "row_number() over(order by %e asc)") {\n                    expression(\n                        table.firstName.length() +\n                            table.lastName.length()\n                    )\n                }\n            )\n    }\n}\nval tuples = sqlClient.createQuery(Book::class) {\n    // highlight-next-line\n    val joinedAuthor = table.asTableEx().weakJoin(baseAuthor) {\n        source.id eq target._1.asTableEx().books.id\n    }\n    where += joinedAuthor._2 lt 4\n    select(\n        table,\n        joinedAuthor._1\n    )\n}.execute()\n'})})})]}),"\n",(0,l.jsx)(n.p,{children:"Generates the following SQL:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"select\n    tb_1_.ID,\n    tb_1_.NAME,\n    tb_1_.EDITION,\n    tb_1_.PRICE,\n    tb_1_.STORE_ID,\n    tb_2_.c1,\n    tb_2_.c2,\n    tb_2_.c3,\n    tb_2_.c4\nfrom BOOK tb_1_\n-- highlight-next-line\ninner join (\n    (\n        select\n            tb_3_.ID c1,\n            tb_3_.FIRST_NAME c2,\n            tb_3_.LAST_NAME c3,\n            tb_3_.GENDER c4,\n            row_number() over(order by (\n                length(tb_3_.FIRST_NAME) + \n                length(tb_3_.LAST_NAME)\n            ) asc) c5\n        from AUTHOR tb_3_\n    ) tb_2_\n    inner join BOOK_AUTHOR_MAPPING tb_4_\n        on tb_2_.c1 = tb_4_.AUTHOR_ID\n)\n    on tb_1_.ID = tb_4_.BOOK_ID\nwhere\n    tb_2_.c5 < ? /* 4 */\n"})}),"\n",(0,l.jsx)(n.h2,{id:"cte",children:"CTE"}),"\n",(0,l.jsx)(n.p,{children:"CTE (Common Table Expression) is about rewriting the previous Derived Table SQL"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"select ...\n--highlight-start\nfrom (\n    select ...\n    from my_table\n) tb_1_\n--highlight-end\n"})}),"\n",(0,l.jsx)(n.p,{children:"to CTE style SQL, as follows"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"--highlight-start\nwith tb_1_(...) as (\n    select ...\n    from my_table\n)\n--highlight-end\nselect ...\nfrom tb_1_ \n"})}),"\n",(0,l.jsxs)(n.p,{children:["Except for the different writing style of the generated SQL, ",(0,l.jsx)(n.strong,{children:"there is no difference in functionality from the content described earlier"}),"."]}),"\n",(0,l.jsx)(n.p,{children:"Therefore, we can simply rewrite the first example from the beginning of this article using CTE syntax without much elaboration."}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'BookTable book = BookTable.$;\nAuthorTableEx author = AuthorTableEx.$;\nBaseTable2<BookTable, NumericExpression<Integer>> baseTable =\n    sqlClient\n        .createBaseQuery(book)\n        .addSelect(book)\n        .addSelect(\n            Expression.numeric().sql(\n                Integer.class,\n                "dense_rank() over(" +\n                    "order by %e desc" +\n                    ")",\n                sqlClient.createSubQuery(author)\n                    .where(author.books().id().eq(book.id()))\n                    .selectCount()\n            )\n        )\n        // highlight-next-line\n        .asCteBaseTable();\nList<Book> books =\n    sqlClient\n        .createQuery(baseTable)\n        .where(baseTable.get_2().eq(1))\n        .select(baseTable.get_1())\n        .execute();\n'})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'val baseTable = \n    // highlight-next-line\n    cteBaseTableSymbol {\n        sqlClient.createBaseQuery(Book::class) {\n            selections\n                .add(table)\n                .add(\n                    sql(Int::class, "dense_rank() over(order by %e desc)") {\n                        expression(\n                            subQuery(Author::class) {\n                                where(table.books.id eq parentTable.id)\n                                select(rowCount())\n                            }\n                        )\n                    }\n                )\n        }\n    }\nval books = \n    sqlClient.createQuery(baseTable) {\n        where(table._2 eq 1)\n        select(table._1)\n    }.execute()\n'})})})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Java code uses ",(0,l.jsx)(n.code,{children:"asCteBaseTable"})," instead of ",(0,l.jsx)(n.code,{children:"asBaseTable"})]}),"\n",(0,l.jsxs)(n.li,{children:["Kotlin code uses ",(0,l.jsx)(n.code,{children:"cteBaseTableSymbol"})," instead of ",(0,l.jsx)(n.code,{children:"baseTableSymbol"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The final generated SQL is as follows:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"-- highlight-next-line\nwith tb_1_(c1, c2, c3, c4, c5, c6) as (\n    select\n        tb_2_.ID,\n        tb_2_.NAME,\n        tb_2_.EDITION,\n        tb_2_.PRICE,\n        tb_2_.STORE_ID,\n        dense_rank() over(order by (\n            select\n                count(1)\n            from AUTHOR tb_3_\n            inner join BOOK_AUTHOR_MAPPING tb_4_\n                on tb_3_.ID = tb_4_.AUTHOR_ID\n            where\n                tb_4_.BOOK_ID = tb_2_.ID\n        ) desc)\n    from BOOK tb_2_\n) \nselect\n    tb_1_.c1,\n    tb_1_.c2,\n    tb_1_.c3,\n    tb_1_.c4,\n    tb_1_.c5 from tb_1_\nwhere\n    tb_1_.c6 = ? /* 1 */\n"})}),"\n",(0,l.jsx)(n.h2,{id:"recursive-cte",children:"Recursive-CTE"}),"\n",(0,l.jsxs)(n.p,{children:["SQL's CTE has a very important feature, which is when using ",(0,l.jsx)(n.code,{children:"union all"})," operations to construct base-query:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["The first part of the ",(0,l.jsx)(n.code,{children:"union all"})," operation simply selects some initial data"]}),"\n",(0,l.jsxs)(n.li,{children:["The second part of the ",(0,l.jsx)(n.code,{children:"union all"})," operation joins ",(0,l.jsx)(n.strong,{children:"the CTE itself"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Since the query statement defining the CTE joins the derived table defined by the CTE itself, this is a recursive query"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Recursive CTE is very useful when dealing with tree structures described by self-referential tables"}),"\n"]}),"\n",(0,l.jsxs)(a.A,{groupId:"language",children:[(0,l.jsx)(i.A,{value:"java",label:"Java",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"TreeNodeTable table = TreeNodeTable.$;\nBaseTable2<TreeNodeTable, NumericExpression<Integer>> baseTable =\n    // highlight-next-line\n    TypedBaseQuery.unionAllRecursively(\n        sqlClient\n            .createBaseQuery(table)\n            .where(table.parentId().isNull())\n            .addSelect(table)\n            .addSelect(Expression.constant(1)),\n        // highlight-next-line\n        recursiveRef -> {\n            MutableRecursiveBaseQuery<BaseTable2<TreeNodeTable, NumericExpression<Integer>>> q =\n                sqlClient\n                    .createBaseQuery(\n                        table,\n                        recursiveRef,\n                        (t, r) -> t.parentId().eq(r.get_1().id())\n                    );\n            return q\n                .addSelect(table)\n                .addSelect(\n                    // highlight-next-line\n                    q.recursive()\n                        .get_2()\n                        .plus(Expression.constant(1))\n                );\n        }\n    ).asCteBaseTable();\nList<Tuple2<TreeNode, Integer>> tuples = sqlClient\n    .createQuery(baseTable)\n    .orderBy(baseTable.get_2(), baseTable.get_1().name())\n    .select(\n        baseTable.get_1().fetch(TreeNodeFetcher.$.name()),\n        baseTable.get_2()\n    )\n    .execute();\n"})})}),(0,l.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"val baseTable = cteBaseTableSymbol {\n    sqlClient.createBaseQuery(TreeNode::class) {\n        where(table.parentId.isNull())\n        selections\n            .add(table)\n            .add(constant(1))\n    // highlight-next-line\n    }.unionAllRecursively {\n        sqlClient.createBaseQuery(\n            TreeNode::class, \n            // highlight-next-line\n            it, \n            {source.parentId eq target._1.id }\n        ) {\n            selections\n                .add(table)\n                .add(\n                    // highlight-next-line\n                    recursive._2 + 1\n                )\n        }\n    }\n}\nval tuples = sqlClient.createQuery(baseTable) {\n    orderBy(table._2, table._1.name)\n    select(\n        table._1.fetchBy {\n            name()\n        },\n        table._2\n    )\n}.execute()\n"})})})]}),"\n",(0,l.jsx)(n.p,{children:"Generates the following SQL:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"with tb_1_(c1, c2, c3) as (\n        select\n            tb_2_.ID,\n            tb_2_.NAME,\n            1\n        from TREE_NODE tb_2_\n        where\n            tb_2_.PARENT_ID is null\n        -- highlight-next-line\n        union all\n        select\n            tb_4_.ID,\n            tb_4_.NAME,\n            tb_1_.c3 + ? /* 1 */\n        from TREE_NODE tb_4_\n        -- highlight-next-line\n        inner join tb_1_\n            on tb_4_.PARENT_ID = tb_1_.c1\n    ) select\n    tb_1_.c1,\n    tb_1_.c2,\n    tb_1_.c3 from tb_1_\norder by\n    tb_1_.c3 asc,\n    tb_1_.c2 asc\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The final query returns the following data ",(0,l.jsx)(n.em,{children:"(some blank lines have been manually added for readability)"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'Tuple2(_1={"id":1,"name":"Home"}, _2=1)\n\nTuple2(_1={"id":9,"name":"Clothing"}, _2=2)\nTuple2(_1={"id":2,"name":"Food"}, _2=2)\n\nTuple2(_1={"id":6,"name":"Bread"}, _2=3)\nTuple2(_1={"id":3,"name":"Drinks"}, _2=3)\nTuple2(_1={"id":18,"name":"Man"}, _2=3)\nTuple2(_1={"id":10,"name":"Woman"}, _2=3)\n\nTuple2(_1={"id":7,"name":"Baguette"}, _2=4)\nTuple2(_1={"id":19,"name":"Casual wear"}, _2=4)\nTuple2(_1={"id":11,"name":"Casual wear"}, _2=4)\nTuple2(_1={"id":8,"name":"Ciabatta"}, _2=4)\nTuple2(_1={"id":4,"name":"Coca Cola"}, _2=4)\nTuple2(_1={"id":5,"name":"Fanta"}, _2=4)\nTuple2(_1={"id":22,"name":"Formal wear"}, _2=4)\nTuple2(_1={"id":15,"name":"Formal wear"}, _2=4)\n\nTuple2(_1={"id":12,"name":"Dress"}, _2=5)\nTuple2(_1={"id":20,"name":"Jacket"}, _2=5)\nTuple2(_1={"id":21,"name":"Jeans"}, _2=5)\nTuple2(_1={"id":14,"name":"Jeans"}, _2=5)\nTuple2(_1={"id":13,"name":"Miniskirt"}, _2=5)\nTuple2(_1={"id":24,"name":"Shirt"}, _2=5)\nTuple2(_1={"id":17,"name":"Shirt"}, _2=5)\nTuple2(_1={"id":23,"name":"Suit"}, _2=5)\nTuple2(_1={"id":16,"name":"Suit"}, _2=5)\n'})}),"\n",(0,l.jsx)(n.p,{children:"As can be seen:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Whether in Java or Kotlin, using ",(0,l.jsx)(n.code,{children:"unionAllRecursively"})," is the key to using ",(0,l.jsx)(n.code,{children:"Recursive CTE"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"createBaseQuery"})," has a lambda parameter overload that accepts a ",(0,l.jsx)(n.code,{children:"recursiveRef"})," parameter representing the placeholder for the CTE itself ",(0,l.jsxs)(n.em,{children:["(in Kotlin it's ",(0,l.jsx)(n.code,{children:"it"}),")"]})]}),"\n",(0,l.jsxs)(n.li,{children:["Java needs to use local variable to record an object of type ",(0,l.jsx)(n.code,{children:"MutableRecursiveBaseQuery"})," in order to use its ",(0,l.jsx)(n.code,{children:".recursive()"})," method to get the table object that the CTE itself represents"]}),"\n"]}),"\n",(0,l.jsxs)(n.admonition,{type:"info",children:[(0,l.jsxs)(n.p,{children:["Actually, in the SQL specification, ",(0,l.jsx)(n.code,{children:"union"})," can also be used for ",(0,l.jsx)(n.code,{children:"Recursive CTE"}),", but it is generally considered an inefficient operation and should be avoided."]}),(0,l.jsxs)(n.p,{children:["Therefore, Jimmer's Recursive CTE stipulates that only ",(0,l.jsx)(n.code,{children:"union all"})," can be used, not ",(0,l.jsx)(n.code,{children:"union"}),"."]})]})]})}function b(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var r=t(34164);const l={tabItem:"tabItem_Ymn6"};var s=t(74848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(l.tabItem,a),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>y});var r=t(96540),l=t(34164),s=t(23104),a=t(56347),i=t(205),o=t(57485),c=t(31682),h=t(70679);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:l}}=e;return{value:n,label:t,attributes:r,default:l}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function b(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function j(e){let{queryString:n=!1,groupId:t}=e;const l=(0,a.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(l.location.search);n.set(s,e),l.replace({...l.location,search:n.toString()})}),[s,l])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:l}=e,s=u(e),[a,o]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!b({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:s}))),[c,d]=j({queryString:t,groupId:l}),[g,_]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[l,s]=(0,h.Dv)(t);return[l,(0,r.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:l}),x=(()=>{const e=c??g;return b({value:e,tabValues:s})?e:null})();(0,i.A)((()=>{x&&o(x)}),[x]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!b({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),_(e)}),[d,_,s]),tabValues:s}}var _=t(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var p=t(74848);function m(e){let{className:n,block:t,selectedValue:r,selectValue:a,tabValues:i}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),h=e=>{const n=e.currentTarget,t=o.indexOf(n),l=i[t].value;l!==r&&(c(n),a(l))},d=e=>{let n=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,p.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,p.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>o.push(e),onKeyDown:d,onClick:h,...s,className:(0,l.A)("tabs__item",x.tabItem,s?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function f(e){let{lazy:n,children:t,selectedValue:s}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:(0,l.A)("margin-top--md",e.props.className)}):null}return(0,p.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function v(e){const n=g(e);return(0,p.jsxs)("div",{className:(0,l.A)("tabs-container",x.tabList),children:[(0,p.jsx)(m,{...n,...e}),(0,p.jsx)(f,{...n,...e})]})}function y(e){const n=(0,_.A)();return(0,p.jsx)(v,{...e,children:d(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(96540);const l={},s=r.createContext(l);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);